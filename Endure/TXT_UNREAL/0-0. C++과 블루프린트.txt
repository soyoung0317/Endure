Q. 언리얼 엔진의 블루프린트와 C++ 차이점은?

Q. C++로만 구현 시, 블루프린트와의 연동을 어떻게 할 것인가?
(C++로만 게임제작이 가능한데, 나중에라도 기획자나 아티스트가 블루프린트로 기능을 수정/확장할 수 있도록 연동하는방법 )

-------------------------------------------------

Q. 언리얼 엔진의 블루프린트와 C++ 차이점은?
A.
	[답변]
	언리얼 엔진의 블루프린트는 비주얼 스크립팅 시스템으로, 프로그래밍 지식이 없는 기획자나 아티스트도 게임 로직을 손쉽게 구현할 수 있습니다. 
	반면, C++은 엔진의 핵심 로직을 담당하며 고성능, 복잡한 시스템, 엔진 확장 등이 필요할 때 주로 사용합니다. 
	블루프린트는 빠른 프로토타입, 실시간 반영, 쉬운 디버깅이 장점이지만, 성능 한계와 대형 프로젝트에서의 관리가 어려운 단점이 있습니다. 
	실제로는 블루프린트와 C++을 함께 사용해서 각자의 장점을 살리는 것이 일반적입니다.

	1. 정의
		- 블루프린트(BluePrint)
		: 언리얼 엔진에서 제공하는 비주얼 스크립팅 시스템.
		: 노드 기반으로 코드를 작성할 수 있어, 프로그래밍 지식이 적은 사람도 게임 로직을 설계할 수 있음.
		
		- C++
		: 언리얼 엔진의 핵심 로직이 구현된 프로그래밍 언어.
		: 직접 코드를 작성해 세부적인 로직과 시스템을 구현함.

	2. 차이점 및 왜 이렇게 설계되었나
		언리얼 엔진은 비개발자(아티스트, 기획자)도 게임 로직을 쉽게 수정할 수 있도록 블루프린트를 도입함.
		복잡한 기능, 엔진 레벨의 최적화가 필요한 부분은 여전히 C++로 구현해야 하므로, 둘을 조합해 사용하도록 설계됨.

		| 구분			| 블루프린트			| C++					|
		| -----------	| ----------		| ------------			|
		| 개발 방식		| 시각적(비주얼)		| 텍스트 코드			|
		| 속도/성능		| 느림(인터프리트)	| 빠름(컴파일)			|
		| 개발 속도		| 빠름				| 느림					|
		| 유연성			| 제한적				| 매우 높음				|
		| 초보자 접근성	| 높음				| 낮음					|
		| 디버깅			| 쉬움(실시간 반영)	| 어려움(빌드 필요)		|
		| 협업			| 아티스트/기획 가능	| 프로그래머 위주			|
		| 플랫폼 접근	| 한정적				| 엔진 깊숙이 접근 가능	|

	3. 장점과 단점
		블루프린트 장점
				- 직관적이고 빠른 프로토타이핑
				- 실시간 변경/반영 가능 (Hot Reload)
				- 협업 시 비개발자도 쉽게 사용
		블루프린트 단점
				- 코드 재사용/유지보수 어려움
				- 대규모 프로젝트에서 관리 어려움
				- 실행 속도 느림 (C++ 대비)
				- 복잡한 로직/최적화 한계
			
		C++ 장점
				- 최적화와 성능 극대화
				- 복잡한 시스템/저수준 엔진 기능 접근
				- 코드 재사용, 모듈화 용이 
		C++ 단점
				- 컴파일/빌드 필요 → 개발 사이클 느림
				- 초보자 진입장벽 높음
				- 디버깅/에러 수정이 번거로울 수 있음

-------------------------------------------------

Q. C++로만 구현 시, 블루프린트와의 연동을 어떻게 할 것인가?
