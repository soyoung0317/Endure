Q. CRTP(Curiously Recurring Template Pattern) 에 대해 설명하시오.

Q. CRTP와 가상 함수의 차이점은 무엇인가요?

-------------------------------------------------------

Q. CRTP(Curiously Recurring Template Pattern) 에 대해 설명하시오 
A.  1. 정의
	부모 클래스가 자식 클래스를 템플릿 매개변수로 받아 동작을 구현하는 설계 방식
	동적 다형성의 이점을 누리면서도 가상 함수 호출의 오버헤드를 피할 수 있다.
		-> 제로 오버헤드 추상화의 방식중 하나로 사용된다. 

    2. 사용하는 이유
        - 컴파일 타임 다형성 제공 : 런타임 다형성을 제공하는 가상 함수(virtual function)와 달리, 컴파일 시점에 함수 호출을 결정하여 더 빠른 성능을 제공합니다.
        - 코드 재사용 : 기반 클래스의 일반적인 동작을 정의하면서도 파생 클래스에서 특정 동작을 구현하도록 강제합니다.
        - 가상 함수 오버헤드 제거 : 가상 함수 테이블(vtable) 사용을 피할 수 있어 성능이 중요한 코드에 적합합니다.
        - 템플릿 기반 설계 확장 : 특정 설계 패턴이나 동작(예: 로깅, 형 변환)을 템플릿으로 일반화하여 여러 클래스에서 재사용 가능.
       
    3. 주의할 점
        - 코드 복잡성 : 템플릿 사용으로 인해 코드가 복잡해질 수 있으며, 디버깅이 어려워질 수 있습니다.
        - 컴파일 타임 증가 : 템플릿을 사용하는 만큼 컴파일 타임이 늘어날 수 있습니다.
        - 유효하지 않은 타입 사용 방지 : 템플릿 매개변수로 Derived가 아닌 다른 클래스를 전달하지 않도록 주의해야 합니다.

[사용법 예시]
        template <typename Derived>
        class Animal {
        public:
            void makeSound() {
                static_cast<Derived*>(this)->sound();
            }
            //부모 클래스 포인터를 자식 클래스 포인터로 변환하여 자식 클래스의 멤버 함수를 호출하기 위해 사용.
        };
        
        class Dog : public Animal<Dog> {
        public:
            void sound() {
                std::cout << "Woof!" << std::endl;
            }
        };
        
        class Cat : public Animal<Cat> {
        public:
            void sound() {
                std::cout << "Meow!" << std::endl;
            }
        };
        
        // 사용 예
        Dog dog;
        Cat cat;
        
        dog.makeSound();  // "Woof!" 출력
        cat.makeSound();  // "Meow!" 출력
        
        Animal::makeSound()는 가상 함수가 아니고 CRTP를 사용해 컴파일타임에 sound()함수를 호출할 수 있다. 
        = 가상함수 테이블 없이 동작.
        
-------------------------------------------------------

Q.  CRTP와 가상 함수의 차이점은 무엇인가요?
A.  CRTP:
        컴파일 타임에 다형성을 구현.
        가상 함수 테이블(vtable)이 없어 오버헤드가 적음.
    가상 함수:
        런타임 다형성 제공.
        더 유연한 구조지만 호출 시 약간의 오버헤드 발생.
        
-------------------------------------------------------