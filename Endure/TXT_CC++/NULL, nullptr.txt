Q. NULL 과 nullptr의 차이점은 무엇인가 ?

-------------------------------------------------

Q. NULL 과 nullptr의 차이점은 무엇인가 ?
A.	1. 널(Null)
        의미: "값이 없음" 또는 "존재하지 않음"을 나타내는 개념.
        프로그래밍 언어에서 특정 메모리 참조나 값이 없는 상태를 표현할 때 사용.
     2. NULL
        의미: C/C++에서 사용되는 매크로 상수로, "널 포인터(null pointer)"를 표현.
        정의는 **0**으로 되어 있으며, 정수형 값이므로 **타입 안전(type-safe)**하지 않음.
        포인터와 정수를 구분하지 못하므로, 코드의 명확성이 떨어지고 오류 발생 가능성이 있음.
    3. nullptr
        의미: C++11에서 도입된 타입 안전(type-safe) 널 포인터 상수.
        nullptr은 포인터와만 비교 가능하며, 정수형 값과 혼동되지 않음.
    
    int a = null;   // 컴파일 오류 (C++에서 null은 정의되지 않음)
    int b = NULL;   // b는 0으로 초기화 (NULL은 정수형 값 0으로 정의됨) - 스택 메모리에 저장.
    int* c = nullptr; // 유효한 메모리 주소를 가리키지 않는 상태로 초기화되었지만, 포인터 변수 자체는 존재하며 메모리를 점유합니다. - 스택 메모리에 할당

    NULL의 경우 상수로 널 포인터를 표현하며 0과 의미가 같았습니다. 이로인해 int타입과 pointer타입의 함수 오버로딩시 모호함이 문제가 되는 경우가 많았습니다. 
    이를 해결하기 위해 생긴것이 nullptr로, 컴파일러는 (void*)0으로 해석하며, 앞선 문제상황인 중복적재를 해결할 수 있게됩니다. 
    또한, auto 변수의 예외처리를 한다고 했을떄, 
    if(auto_val == 0) 의경우 해당변수가 정수인지, 포인터타입인지 명확히 알 수 없게됩니다. 
    이 코드를 if(auto_val == nullptr) 로 작성하게되면 명확하게 포인터 형식임을 알 수 있게됩니다. 


    nullptr은 ()
[참고.1]
        #ifdef __cplusplus
            #define NULL 0
        #else
            #define NULL ((void *)0)
            
[참고.2]
        10진수    16진수    문자
        0       0x00        NUL
        1       0x01        SOH
        2       0x02        STX
        3       0x03        ETX
        4       0x04        EOT

[예시.1]
    char* ptr = NULL과 char* ptr = 0 은 같은의미. 
    int a = NULL과 int a = 0 의 의미는 다릅니다. 
    전자 : a의 주소값이 0 
    후자 : a변수의 값이 0 
       
[예시.2] 
        int a = null;
        int* b = null;

        둘다 cout하면 오류없이 0을 출력하게되는데, (중요. null은 0이 아니다. )

        a의 경우 주소값이 있고, b의경우 주소값이 없다고 출력되게되는데 

        따라서, 이와같은 문제를 해결하기위해 nullptr를 사용합니다. 

        int a = nullptr;    // 불가능
        int* b = nullptr;   // 가능

        이렇게 포인터 타입의 변수의 모호함을 nullptr를 통해 해결할 수 있습니다. 
        
-------------------------------------------------