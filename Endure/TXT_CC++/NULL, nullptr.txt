Q. NULL 과 nullptr의 차이점은 무엇인가 ?

----------------------------------

A.	NULL의 경우 상수로 널 포인터를 표현하며 0과 의미가 같았습니다. 이로인해 int타입과 pointer타입의 함수 오버로딩시 모호함이 문제가 되는 경우가 많았ㅅ브니다. 
    이를 해결하기 위해 생긴것이 nullptr로, 컴파일러는 (void*)0으로 해석하며, 앞선 문제상황인 중복적재를 해결할 수 있게됩니다. 
    또한, auto 변수의 예외처리를 한다고 했을떄, 
    if(auto_val == 0) 의경우 해당변수가 정수인지, 포인터타입인지 명확히 알 수 없게됩니다. 
    이 코드를 if(auto_val == nullptr) 로 작성하게되면 명확하게 포인터 형식임을 알 수 있게됩니다. 


    nullptr은 ()
[참고.1]
        #ifdef __cplusplus
            #define NULL 0
        #else
            #define NULL ((void *)0)
            
[참고.2]
        10진수    16진수    문자
        0       0x00        NUL
        1       0x01        SOH
        2       0x02        STX
        3       0x03        ETX
        4       0x04        EOT

[예시.1]
    char* ptr = NULL과 char* ptr = 0 은 같은의미. 
    int a = NULL과 int a = 0 의 의미는 다릅니다. 
    전자 : a의 주소값이 0 
    후자 : a변수의 값이 0 
       
[예시.2] 
        int a = null;
        int* b = null;

        둘다 cout하면 오류없이 0을 출력하게되는데, (중요. null은 0이 아니다. )

        a의 경우 주소값이 있고, b의경우 주소값이 없다고 출력되게되는데 

        따라서, 이와같은 문제를 해결하기위해 nullptr를 사용합니다. 

        int a = nullptr;    // 불가능
        int* b = nullptr;   // 가능

        이렇게 포인터 타입의 변수의 모호함을 nullptr를 통해 해결할 수 있습니다. 
