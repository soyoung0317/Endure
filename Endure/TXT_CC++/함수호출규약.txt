Q. 함수호출규약에 대해 설명하시오 

-------------------------------------------------

Q. 함수호출규약에 대해 설명하시오 
A. 
	1. 정의
		함수가 호출될 때 인자를 어떻게 전달하고, 반환값을 어떻게 처리하며, 스택(또는 레지스터)을 어떻게 관리할 것인지를 정의하는 일련의 규칙

	2. 주요 요소
		매개변수 전달 방식 : 함수의 인자가 스택에 저장되는 순서(예: 오른쪽부터 왼쪽으로 push) 또는 특정 레지스터를 통해 전달되는 방식을 규정합니다.
				예를 들어, 대표적인 cdecl 호출 규약에서는 매개변수를 오른쪽(마지막 인자)부터 왼쪽(첫 번째 인자)으로 스택에 push합니다.

		스택 클린업(정리) 책임:
			함수 호출 후 스택에서 인자를 제거하는 책임이 호출자(caller)에게 있는지, 피호출자(callee)에게 있는지를 결정합니다.
			cdecl의 경우 호출자가 스택 정리를 담당하고, stdcall의 경우 피호출자가 정리합니다.

		반환값 처리:
			함수의 반환값이 어떤 레지스터나 메모리 위치를 통해 전달되는지를 정합니다.			
			일반적으로 32비트 시스템에서는 EAX 레지스터를 사용하여 반환값을 전달합니다.
		
		레지스터 사용 규칙:
			어떤 레지스터가 함수 호출 전후에 보존되어야 하는지(보존 레지스터)와, 어떤 레지스터가 호출에 따라 변경되어도 괜찮은지(휘발성 레지스터)를 규정합니다.
	
	3. 대표적인 호출 규약의 예
		cdecl (C declaration):
			매개변수를 오른쪽에서 왼쪽 순서로 스택에 push합니다.
			호출자가 스택 클린업을 담당합니다.

		stdcall (Standard Call):
			매개변수 전달 순서는 cdecl과 유사하지만, 피호출자가 스택 정리를 담당합니다.
			주로 Windows API에서 사용됩니다.

		fastcall:
			일부 매개변수를 레지스터를 통해 전달하여 함수 호출의 성능을 향상시키는 규약입니다.
			최대 2개의 인자가 레지스터를 통해 전달됩니다. 남은 인자는 스택에 저장합니다.

-------------------------------------------------