Q. 레퍼런스에 대해 설명하시오. 

-------------------------------------------------

Q. 레퍼런스에 대해 설명하시오. 
A. 
	1. 정의
		- 레퍼런스(Reference) 는 기존 변수를 가리키는 또 다른 이름(alias)을 제공하는 기능이다.
		- 즉, 레퍼런스 변수를 선언하면 원본 변수의 또 다른 별명이 되어, 동일한 메모리 주소를 공유한다.

	2️. 왜 사용하는가?
		- 포인터처럼 번거롭게 *와 ->를 사용할 필요 없이 간편하게 원본 데이터를 다룰 수 있음
		- 복사 없이 원본 데이터를 직접 참조하므로 성능 최적화 (메모리 절약)
		- 함수 인자로 사용하면 불필요한 복사 없이 값 수정 가능

	3.  레퍼런스의 종류
		L-value reference (좌값 참조) / T&			: lvalue만 참조 가능
		const L-value reference		 / const T&		: rvalue도 참조 가능 (값 변경 불가)
		R-value reference (우값 참조) / T&&			: rvalue만 참조 가능 (이동 시 사용)

		1)  좌값 참조 (L-value reference)
			좌값(lvalue)란, 변수처럼 "메모리에 존재하며 수정 가능한 값"을 의미한다.
			좌값 참조(T&)는 반드시 "변수"처럼 수정 가능한 값만 참조할 수 있다.
			즉, 10 같은 rvalue(우값)는 참조할 수 없음.
				int a = 10;
				int& ref = a;  // ref는 a를 참조
				int& ref = 10;  // 오류 (rvalue를 참조할 수 없음)

		2) const를 사용한 좌값 참조
			const int&는 rvalue를 참조할 수 있다!
			10 같은 rvalue는 메모리에 임시 객체로 저장되므로, const를 붙이면 참조 가능
			하지만 ref = 20;처럼 값을 변경하는 것은 불가능
				const int& ref = 10; // 가능 (rvalue도 참조 가능)

		3) 우값 참조 (R-value reference)
			우값(rvalue)란, 임시 값(temporary value)으로, 특정 변수에 저장되지 않는 값이다.
			우값 참조(T&&)는 이동 연산(move semantics) 및 최적화에 사용된다.

	4. 사용예제 
		1) 함수에서 레퍼런스로 사용
			- 참조를 사용하면 매개변수로 들어간 값이 복사되지 않고 직접 수정됨!
			void modify(int& x) {
			    x = 100;  // 원본 값 수정
			}

		2) const T&를 사용한 읽기 전용 참조
			- const std::string&을 사용하면 불필요한 복사를 방지하면서 원본 데이터를 읽을 수 있음.
			void print(const std::string& str) {
			    std::cout << str;
			}

		3) 우값 참조(T&&)를 사용한 이동 최적화
			- 우값 참조(T&&)를 사용하면 복사 없이 "이동" 가능!
			void moveExample(std::string&& str) {
			    std::string newStr = std::move(str);  // 이동 (복사 없음)
			}
			
-------------------------------------------------