Q. 템플릿에 대해 설명하시오 

Q. 가변인자 템플릿에 대해 설명하시오 

Q. 특수템플릿에 대해 설명하시오 

Q. 다형성과 템플릿의 차이점에 대해 설명하시오. 

Q. 코드 비대화의 문제점
-------------------------------------------------

Q.	템플릿에 대해 설명하시오 
A.	
	1. 정의:
		템플릿은 C++에서 제네릭 프로그래밍을 지원하기 위해 사용되는 기능입니다. 템플릿은 함수나 클래스를 작성할 때, 자료형을 미리 지정하지 않고, 사용 시점에 타입을 지정할 수 있게 해줍니다.
		함수 템플릿과 클래스 템플릿 두 가지 유형이 있습니다.
		
	2. 특징:
		유연성: 템플릿을 사용하면, 여러 자료형에 대해 동일한 함수나 클래스를 작성할 수 있습니다.
		타입 안전성: 컴파일 시점에 타입이 결정되기 때문에 런타임 오류를 줄이고 타입 안전성을 보장합니다.
		코드 재사용성: 템플릿을 통해 다양한 자료형에 대해 동일한 코드를 사용할 수 있습니다.

	3. 장점:
		코드 중복을 없애고, 다양한 데이터 타입을 다룰 수 있어 코드 재사용을 촉진합니다.
		컴파일 타임에 타입을 체크하므로 타입 안정성이 보장됩니다.
		
	4. 단점:
		- 컴파일 타임에 많은 코드가 생성되어 컴파일 시간이 길어질 수 있습니다.
		- 디버깅이 어려울 수 있습니다. 컴파일러가 템플릿 인스턴스화 과정에서 많은 코드가 생성되기 때문에 오류 메시지가 복잡할 수 있습니다.
		- 템플릿을 사용할 때 타입 유추가 정확하게 이루어지지 않으면 컴파일 오류가 발생하거나 예상치 못한 동작을 할 수 있습니다.
			특히 템플릿 특수화를 잘못하면 잘못된 타입이 사용되어 프로그램 동작이 틀어질 수 있습니다.

-------------------------------------------------

Q. 가변인자 템플릿에 대해 설명하시오 
A.
	1. 정의:
		가변인자 템플릿(variadic templates)은 템플릿 매개변수의 수가 정해져 있지 않고, 컴파일 타임에 동적으로 수의 매개변수를 받아들일 수 있는 템플릿입니다.
		C++11에서 도입되었으며, 여러 인수를 처리하는 데 유용합니다.

	2. 특징:
		템플릿 함수나 클래스를 정의할 때 매개변수 개수에 제한이 없다.
		템플릿 재귀와 재귀적 함수 호출을 통해 처리할 수 있습니다.

	3. 장점:
		다양한 수의 인자를 받아서 유연하게 처리할 수 있습니다.
		템플릿을 사용해 함수나 클래스를 다양한 인자 조합에 대해 처리할 수 있습니다.
	
	4. 단점:
		가변인자 템플릿을 잘못 사용하면 컴파일 타임에 오류가 발생할 수 있습니다.
		복잡한 템플릿 메타프로그래밍에서 오류 추적이 어려워질 수 있습니다.

-------------------------------------------------

Q. 특수템플릿에 대해 설명하시오 
A.
	1. 정의:
		특수 템플릿(Template Specialization)은 일반 템플릿을 기반으로, 특정 자료형에 대해 다른 동작을 제공하는 방법입니다.
		전체 특수화(Full Specialization)와 부분 특수화(Partial Specialization)로 나뉩니다.
		
	2. 특징:
		전체 특수화는 특정 타입에 대해 템플릿을 완전히 다르게 구현할 때 사용됩니다.
		부분 특수화는 템플릿 매개변수의 일부만을 바꾸어 동작을 다르게 할 때 사용됩니다.
		
	4. 장점:
		특정 타입에 대해 특별한 처리가 가능하므로, 최적화나 특수한 로직을 적용할 수 있습니다.
		
	5. 단점:
		복잡성 증가: 템플릿 특수화를 과도하게 사용하면 코드가 복잡해지고, 추적이 어려워질 수 있습니다.


-------------------------------------------------

Q. 다형성과 템플릿의 차이점에 대해 설명하시오. 
A.
	다형성(Polymorphism)은 상속과 가상 함수를 사용하여 부모 클래스의 포인터나 참조를 통해 자식 클래스의 함수를 호출하는 기술입니다. 
		다형성은 런타임 시 동적으로 결정됩니다.
	템플릿은 컴파일 타임에 타입을 지정하여 여러 자료형을 처리할 수 있는 방법입니다. 템플릿은 코드 재사용을 돕습니다.

-------------------------------------------------

Q. 코드 비대화의 문제점
A.
	템플릿을 많이 사용할 경우, 인스턴스화 과정에서 여러 개의 코드가 생성되어 코드 비대화가 발생할 수 있습니다.
	
	* 문제점
		메모리 사용 증가: 템플릿으로 생성된 코드가 많아지면 실행 파일의 크기가 커지고 메모리 사용량도 증가합니다.
		컴파일 타임 증가: 템플릿 인스턴스화가 많으면 컴파일 타임이 길어질 수 있습니다.
		디버깅 어려움: 템플릿 코드의 복잡성이 증가하면서 오류 추적이 어려워질 수 있습니다.

