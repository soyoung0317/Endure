Q. 구조체와 클래스의 차이에 대해 설명하시오

Q. Get / Set 함수를 통해 변수에 접근하는 이유는 무엇인가?

Q. 구조체 패딩에 대해 설명하시오 

Q. 시스템 비트에 따라 왜 다르게 작동하는가 ?

Q. 클래스에서도 구조체 패딩이 가능합니까 ? 
--------------------------------------------------------------------

A.	구조체의 경우 명시하지 않는다면 기본접근제어자로 pulic 을 사용하고 
	클래스의 경우 명시하지 않는다면 기본접근제어자로 private을 갖는 다는 차이점이 있습니다. 

A.	메서드를 통해 접근하기때문에 올바르지 않은 입력에 대해 사전에 처리할 수 있게 제한할 수 있기 때문이다. 

A.	CPU가 접근하기 쉬운 위치 메모리에 구조체를 배치하는 과정에서 추가적인 메모리 공간을 삽입하는 방식입니다.
	멤버변수의 선언 순서에 따라 메모리에 배치하게 되는데 CPU가 한번에 읽어들이는 크기에 맞게 데이터를 정렬하여 성능 향상을 할 수 있습니다.

A.	32비트에서는 4바이트 경계로, 64비트에서는 8바이트 경계로 사용하는 이유는 주로 CPU의 레지스터 크기때문입니다. 

A.	네 가능합니다. 

[참고]
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

typedef struct temp {
    int a; // 4byte
    int b; // 4byte
    char c; // 1byte
    char d; // 1byte
    double e; // 8byte
    short f; // 2byte
}TEMP;

struct Example {
    char a;    // 1 byte
    int b;     // 4 bytes
    double c;  // 8 bytes
};

int main() {
    Example obj;
    cout << "size of Example : " << sizeof(obj) << endl;

    cout << "주소 of a: " << (unsigned long long) (void*)&obj.a << endl;
    cout << "주소 of b: " << (unsigned long long) &obj.b << endl;
    cout << "주소 of c: " << (unsigned long long) &obj.c << endl;
    
    //TEMP obj;

    //// 
    //cout << "size of TEMP : " << sizeof(obj) << endl;

    //// 각 멤버의 메모리 주소 출력
    //cout << "주소 of a: " << (unsigned long long) &obj.a << endl;
    //cout << "주소 of b: " << (unsigned long long) &obj.b << endl;
    //cout << "주소 of c: " << (unsigned long long) (void*)&obj.c << endl;
    //cout << "주소 of d: " << (unsigned long long) (void*)&obj.d << endl;
    //cout << "주소 of e: " << (unsigned long long) &obj.e << endl;
    //cout << "주소 of f: " << (unsigned long long) &obj.f << endl;
    return 0;
}
