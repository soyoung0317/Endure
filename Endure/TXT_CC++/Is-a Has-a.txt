Q. Is-a 와 Has-a 에 대해 설명하시오 

-------------------------------------------------------

Q. Is-a 와 Has-a 에 대해 설명하시오 
A. 
	1. Is-a 관계 (상속을 통한 관계)
		- 정의:
			Is-a 관계는 상속을 통해 나타낼 수 있습니다. 
			"A is a B"라는 형태로 표현되며, 이는 A가 B의 하위 클래스임을 의미합니다. 즉, A는 B의 일종이다라는 의미입니다.
		
		- 왜 사용하는가:
			상속을 통해 코드의 재사용성을 높이고, 추상화를 통해 더 일반적인 형태의 클래스 계층을 만들 수 있습니다.
			다형성을 활용하여 부모 클래스 타입의 참조로 자식 클래스 객체를 처리할 수 있게 합니다.
		
		- 장점과 단점:
			장점: 상속을 통해 공통된 기능을 부모 클래스에서 정의하고, 자식 클래스에서는 이를 상속받아 사용하여 중복 코드를 줄일 수 있습니다.
			단점: 상속이 잘못 사용되면, 부모 클래스와 자식 클래스 간의 관계가 복잡해지고, 강한 결합으로 인해 유지보수가 어려워질 수 있습니다.

	2. Has-a 관계 (구성을 통한 관계)
		- 정의:
			Has-a 관계는 구성을 통해 나타낼 수 있습니다. 
			"A has a B"라는 형태로 표현되며, 이는 A가 B 타입의 객체를 포함하거나 소유한다는 의미입니다. 즉, A는 B를 포함하고 있다는 뜻입니다.
			
		- 왜 사용하는가:
			구성을 통해 클래스 간의 관계를 설정할 때, 두 클래스가 독립적으로 존재하면서도 서로 협력할 수 있도록 만듭니다.
			클래스를 설계할 때 복잡한 객체를 만들고, 각 객체가 다른 객체를 포함하여 더 큰 시스템을 구성하는 데 유용합니다.
			
		- 장점과 단점:
			장점: 두 클래스 간의 결합도를 낮출 수 있으며, 각 클래스가 독립적으로 유지될 수 있어 유지보수가 용이합니다.
			단점: 여러 개체를 포함하거나 소유하는 방식이 복잡해지면 관리가 어려울 수 있습니다.
			
-------------------------------------------------------
