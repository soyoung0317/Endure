Q. 객체 지향 프로그래밍에 대해 설명하시오 

Q. 객체지향과 절차지향의 차이에 대해 설명하시오 

-------------------------------------------------------

Q. 객체 지향 프로그래밍에 대해 설명하시오 
A. (24.11.21)
	객체지향 프로그래밍이란 현실세계를 모델링한것으로 캡슐화, 상속성, 다형성, 추상화의 네가지 특징이 있습니다. 
	
	캡슐화의경우, 데이터와 기능을 하나로 묶어놓는것입니다. 접근제한자를 통해 정보 은닉이 가능한데 
	예를들어, 자동차 내부를 몰라도 자동차를 운전할수 있는것과 같습니다. 

	상속성의경우, 
	1. 정의
		부모 클래스의 속성과 기능을 자식 클래스에서 재사용하고 확장하는 기능을 말합니다.
	2. 왜 사용하는가 ?
		코드 재사용성 : 부모클래스의 멤버를 자식클래스에서 재사용할 수 있어 코드 중복을 줄이고 유지보수를 간소화 한다. 
		확장성 : 기존 클래스를 기반으로 새로운 기능을 추가하거나 수정할 수 있어 유연하고 확장가능한 작성이 가능하다. 
	3. 사용예시
		예를들어, 무기클래스의 경우 기본적으로 공격력, 공격속도 와 같은 값을 정의 하였고, 
		자식클래스들(총, 검, 칼 등)의 경우 부모 클래스의 멤버를 재사용하여 각각의 무기 특성에 맞는 값을 설정하는것 입니다. 
	
	다형성의 경우, 
	1. 정의 : 
		같은 이름의 함수나 객체가 다양한 형태로 동작할 수 있는 객체 지향 프로그래밍(OOP)의 중요한 특징.
		다형성은 컴파일 타임 다형성(정적 바인딩)과 런타임 다형성(동적 바인딩)으로 구분됩니다.
	2. 왜 사용하는가 ? 
		유연성과 확장성 - 새로운 클래스나 기능을 추가할 때 기존 코드를 수정하지 않아도 동작하도록 설계할 수 있다. 
		유지보수성 - 복잡한 조건문을 줄일 수 있어 유지보수가 용이하다. 
	3. 사용예시
		컴파일 타임 다형성 (정적 바인딩) - 함수 오버로딩 : 같은 함수 이름을 사용하지만 매개변수의 타입이나 개수가 다를 때 컴파일러가 적절한 함수를 선택합니다.
		런타임 다형성 (동적 바인딩) - 가상 함수와 상속 : 상속 구조에서 런타임에 적절한 함수를 호출합니다.

	추상화의 경우, 부모클래스에서는 클래스가 구현해야할 기능만을 명시하고 
	자식클래스에서는 실제 구현만 하는것으로 
	예를들어, 운전대, 페달, 안전벨트 등의 자동차 부품이 자동자마다 모두 들어가있는건 같지만 그 내부 작동원리는 자동차마다 다를 수 있다는것입니다. 
	
-------------------------------------------------------