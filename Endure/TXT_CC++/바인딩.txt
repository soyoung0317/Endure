Q. 바인딩에 대해 설명하시오 

Q. 가상함수 테이블과 동적 바인딩에 대해 설명하시오

----------------------------------------------

Q.	바인딩에 대해 설명하시오 
A.	정의
	함수 호출 또는 변수와 값의 연결을 프로그램 실행 과정에서 언제 결정짓는지를 나타냅니다.
	정적 바인딩(Static Binding)과 동적 바인딩(Dynamic Binding) 두 가지 유형의 바인딩이 존재합니다.

	왜 사용하는가 ?
	1. 다형성 구현
		동적 바인딩은 다형성을 가능하게 하여 객체지향 프로그래밍에서 중요한 역할을 한다. 
	2. 코드의 재사용성
		같은 이름의 함수가 상황에 따라 다르게 동작하도록 구현하기도 한다. 

	특징
	1. 정적 바인딩
		결정 시점	: 컴파일 시점
		사용 방식	: 일반 함수, 함수 오버로딩
		성능	빠름		: 빠름(직접 호출)
		유연성		: 제한적	
		다형성 구현	: 불가능
	2. 동적 바인딩
		결정 시점	: 런타임 시점
		사용 방식	: 가상 함수(virtual), 순수가상 함수(pure virtual)
		성능	빠름		: 느림 (가상 함수 테이블 vtable 조회 필요)
		유연성		: 매우 유연
		다형성 구현	: 가능
		추가적인 메모리 (vtable)가 필요하다.
		
----------------------------------------------
	
Q. 가상함수 테이블과 동적 바인딩에 대해 설명하시오 . 
A. 동적 바인딩은 가상 함수 테이블을 통해 구현됩니다.
	작동 원리
		1. 클래스가 가상 함수를 포함하면, 컴파일러는 해당 클래스에 대한 가상 함수 테이블(Vtable)을 생성합니다.
		2. 각 객체는 가상 함수 테이블을 가리키는 가상 테이블 포인터(VPTR)를 포함합니다.
		3. 객체의 타입에 따라 적절한 함수가 테이블에서 선택되어 호출됩니다.
	= 가상 함수 호출 시 가상 테이블 포인터(VPTR)를 통해 가상 함수 테이블(Vtable)에 접근하고, 
	  해당 객체의 타입에 맞는 함수가 호출됩니다.

