Q. 깊은복사와 얕은복사에 대해 설명하시오 

Q. 얕은 복사에서 발생할 수 있는 문제점은 무엇인가요?

-------------------------------------------------

Q. 깊은복사와 얕은복사에 대해 설명하시오 
A.	
	1. 정의
		- 얕은 복사 (Shallow Copy):
		객체의 값만을 복사합니다. 복사된 객체는 원본 객체의 주소나 참조를 그대로 공유합니다. 
		즉, 객체의 멤버 변수가 포인터나 동적 메모리를 참조하는 경우, 복사된 객체도 원본 객체의 동적 메모리를 공유하게 됩니다.
		
		- 깊은 복사 (Deep Copy):
		객체뿐만 아니라, 객체가 참조하는 모든 자원(예: 동적 메모리, 동적 배열 등)을 재귀적으로 복사하여 독립적인 복사본을 만듭니다. 
		복사된 객체는 원본 객체와 메모리 상으로 완전히 독립적입니다.
		
	2. 왜 사용하는가
		얕은 복사는 간단한 복사가 필요할 때 사용됩니다. 복사한 객체가 원본 객체와의 관계를 유지하면서 변경할 필요가 없는 경우에 유용합니다.
		
		깊은 복사는 복사된 객체가 원본 객체와 독립적으로 동작해야 할 때 필요합니다. 
		예를 들어, 동적 메모리나 자원을 가진 객체를 복사할 때, 원본과 복사본이 서로 영향을 미치지 않도록 하려면 깊은 복사를 사용해야 합니다.

	3. 장점과 단점
		- 얕은 복사
			장점:
				빠르고 간단한 방식입니다. 복사 과정이 비교적 빠르며, 메모리 사용이 적습니다.
				자원을 공유하려는 경우, 불필요한 메모리 복사를 피할 수 있습니다.
			단점:
				원본 객체와 복사된 객체가 동일한 자원을 공유하기 때문에, 한 객체에서 자원을 수정하면 다른 객체에도 영향을 미칩니다.
				원본 객체가 소멸될 때, 복사된 객체도 영향을 받을 수 있어 예상치 못한 동작을 할 수 있습니다.

		- 깊은 복사
			장점:
				독립적인 복사본을 만들 수 있기 때문에, 원본 객체와 복사된 객체가 서로 영향을 미치지 않습니다.
				복사된 객체가 자원을 독립적으로 관리하므로, 메모리 관리에서 안전합니다.
			단점:
				비용이 많이 듭니다. 깊은 복사는 메모리를 복사하고 자원을 재귀적으로 복사하기 때문에 성능이 상대적으로 떨어지고, 메모리 사용량이 많습니다.
				복사할 객체의 구조가 복잡하거나 다단계로 중첩된 경우, 복사 로직이 복잡해질 수 있습니다.
		
-------------------------------------------------
		
Q. 얕은 복사에서 발생할 수 있는 문제점은 무엇인가요?
A. 
	1. 자원 공유로 인한 오류
		얕은 복사는 객체가 가진 포인터나 참조를 복사하는데, 이는 두 객체가 동일한 메모리 주소를 참조하게 만듭니다. 
		이로 인해 두 객체가 같은 자원을 공유하게 되며, 하나의 객체가 자원을 변경하거나 삭제하면 다른 객체에도 영향을 미치게 됩니다.

	2. 예기치 않은 데이터 변경
		얕은 복사는 객체 간의 자원을 공유하기 때문에, 하나의 객체에서 자원을 변경하면, 다른 객체도 그 변경된 값을 참조하게 됩니다. 
		이는 원치 않는 데이터 수정을 초래할 수 있습니다.

	3. 소멸자 호출 시 문제
		얕은 복사에서 객체의 포인터를 공유하기 때문에, 소멸자에서 자원 해제를 제대로 처리하지 않으면 메모리 누수나 다시 해제된 메모리 참조 문제가 발생할 수 있습니다.
		
-------------------------------------------------
