Q. explicit에 대해 설명하시오. 

Q. int를 매개변수로 하는 생성자가 있을때를 이야기하셨는데, 만약 디폴트생성자만 있다고 하면 어떤일이 일어나나요 ?
#include <iostream>
using namespace std;

class MyClass {
public:
    int count = 0;
	// 암시적으로 테스트할 생성자
    MyClass(int value) { 
        cout << "Constructor called with value: " << value << endl;
    }
    // explicit 생성자 
    explicit MyClass(int value) {
        cout << "Constructor called with value: " << value << endl;
    }
    // 디폴트 생성자
    MyClass() { 
        cout << "Default constructor called" << endl; 
    }
};

int main() {
    MyClass obj = 10;  // 암시적 변환: int -> MyClass
    return 0;
}


----------------------- 가림막 
A. 
	explicit은 생성자나 변환연산자 앞에 사용되어 암시적 변환을 방지하는 키워드 입니다. 
	예를들어, Apple이라는 클래스가 있고, 해당클래스에 int형을 매개변수로 하는 생성자가 있다면, 
	Apple a = 10; 이라는 코드에서, 10을 매개변수로 하는 Apple의 생성자를 호출하게되어 
	Apple a = Apple(10); 이라는 코드로 암시적 변환이 이루어지게됩니다. 
	여기서 explicit 키워드를 생성자에 추가하게되면, Apple a = 10; 이라는 키워드에서 암시적 변환이 금지되고 컴파일 에러가 발생하게됩니다. 
	이처럼 의도치 않은 변환으로 인해 발생하는 버그를 방지하고 변환이 필요할때는 명시적으로 작성해야하므로 코드의 가독성을 향상시키게 됩니다. 
	
A. 디폴트 생성자만 있을경우, int에서 해당 클래스 타입으로 변환할수있는 생성자가 없기때문에 컴파일 에러를 발생하게 됩니다. 