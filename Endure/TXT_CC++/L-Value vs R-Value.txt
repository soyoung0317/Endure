Q. L-Value 와 R-Value에 대해 설명하시오 

Q. R-Value 참조에 대해 설명하시오. 

-------------------------------------------------------

Q.	L-Value 와 R-Value에 대해 설명하시오 
A.	1. 정의
		1) L-Value (Left Value)
			L-Value는 주소를 가질 수 있는 객체로, 식의 왼쪽에 올 수 있는 값을 말합니다.
			수명이 존재하며 변경 가능한 식별자를 의미합니다.
			변수, 배열 원소, 참조 등과 같이 메모리 주소를 가지며 재할당이나 수정이 가능한 객체

		2) R-Value (Right Value)
			임시 값이나 리터럴처럼 메모리 상의 특정 위치를 직접 참조하지 않는 값으로, 보통 할당문의 오른쪽에 오는 값을 의미합니다.
			수정이나 주소 참조가 불가능한 경우가 많음

	* R-Value와 L-Value의 구분
		L-Value는 주소를 가질 수 있으므로 참조 가능하지만, R-Value는 보통 참조할 수 없습니다.
		R-Value는 연산의 결과물로 생성되는 임시 값으로, 메모리 주소가 없거나 일시적으로 존재합니다.
		= -Value와 R-Value를 구분함으로써, 프로그램 내에서 어떤 값이 수정 가능한 객체(메모리 주소 존재)인지, 어떤 값이 임시적이고 변경 불가능한 값인지를 명확히 할 수 있습니다.
		
-------------------------------------------------------

Q. R-Value 참조에 대해 설명하시오. 
A.	1. 정의
		기존의 L-Value 참조(&)는 L-Value만 참조할 수 있었지만, C++11에서 도입된 R-Value 참조(&&)는 R-Value를 참조할 수 있게 했습니다.
		임시 객체(R-Value)를 직접 참조하여 수정하거나 자원을 이동할 수 있게됩니다. 

		* 기존의 방식
			int a = 10; 
			10은 임시 값(R-Value)로 생성 > 이 값은 a라는 변수의 메모리에 복사됩니다. 즉, R-Value(10) → **L-Value(a)**로 변환됩니다.

			int&& rref = 10;
			10은 R-Value입니다. rref는 R-Value 참조이기 때문에 10을 복사하지 않고 그대로 참조합
			복사와 이동 없이, 10이라는 임시 값을 직접 사용할 수 있는 권한을 얻는다.


	2. 필요한 이유
		이동 시맨틱 (Move Semantics): R-Value 참조를 사용해 값의 복사가 아닌 이동을 지원합니다.
		완벽한 전달 (Perfect Forwarding): R-Value와 L-Value를 구분하여 복사와 이동을 처리할 수 있습니다.


-------------------------------------------------------