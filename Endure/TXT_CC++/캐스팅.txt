Q. Casting에 대해 설명하시오

Q. const-cast와 mutable의 차이에 대해 설명하시오  ?

----------------------- 가림막

A. 
	캐스팅은 자료형간 또는 포인터간 형변환시 사용되며 dynamic_cast, static_cast, const_cast, reinterpret_cast가 있습니다. 

	dynamic_cast의경우 안전한 다운캐스팅에서 사용됩니다. 
	런타임에 타입변환이 가능한지 검사하기때문에 런타임 비용이 조금 높은 캐스트이며, 오버헤드가 발생할 수 있습니다. (virtual + 가상함수 테이블 필수 )

	static_cast는 가장 기본적인 캐스팅 연산자로 컴파일 타임에 타입 변환을 수행하며, 정적 타입 변환에 사용됩니다. 
	포인터 끼리의 변환은 허용하지 않지만 상속관계는 허용하여 업캐스팅시 사용하게됩니다. 
	-> 형제 클래스간의 형변환 

	reinterpret_cast의경우 서로 다른 포인터 타입간 변환이 필요하거나 정수와 포인터간 변환이 필요할 때 사용합니다. 
	예를들어, void* 에서 특정 타입 포인터로 변환할때 사용하기도 합니다.
	저는 프로젝트에서 [예시]

	const cast는 const의 속성을 제거하거나 추가하는데 사용합니다. 
	예를들어, 오버로딩된 상수/비상수 멤버 함수 호출간의 문제 등에서 사용됩니다. 
	[예시]	const_cast를 사용할 때 상수/비상수 멤버 함수 간의 상호 호출을 잘못 설계하면, 무한 재귀 호출 문제가 발생할 수 있다.
			이를 방지하려면 const_cast를 사용할 때 매우 신중해야 하며, 상수/비상수 함수 간의 호출 관계를 명확히 설계해야 합니다.
	
[참고]	
	class MyClass {
	public:
	    void print() const {
	        // const를 제거하고 비상수 멤버 함수를 호출
	        const_cast<MyClass*>(this)->print();
	    }
	
	    void print() {
	        // 비상수 멤버 함수에서 상수 멤버 함수 호출
	        this->print();
	    }
	};

	int main() {
	    MyClass obj;
	    obj.print();  // 여기서 무한 재귀 발생
	    return 0;
	}
	: const print()에서 비상수 print 호출 -> 비상수 print는 const print()함수 호출 -> 반복 -> 무한재귀함수 

A. (24.11.21)
	mutable의경우 변수자체가 const인것이 아니라 const객체 내에서 변경 가능할 수 있다는 변경가능이라는 속성이고 
	const_cast의경우 객체의 const속성을 수정해버리는것을 의미합니다.
