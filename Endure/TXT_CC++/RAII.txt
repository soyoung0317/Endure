Q. RAII(Resource Acquisition Is Initialization) 에 대해 설명하시오 

-------------------------------------------------

Q.	RAII 에 대해 설명하시오 
A.	1. 정의
		프로그래머가 직접 자원을 획득하고 관리하는 것이 아니라, 자원의 생성, 파괴, 관리를 모두 객체에 위임하는 것을 의미한다.
		= 객체가 생성될 때 자원을 할당하고, 객체가 소멸될 때 자원을 자동으로 해제하는 것

	2. 동작방식
		1) 자원 할당: 객체가 생성될 때 자원을 할당합니다. 예를 들어, 메모리 할당이나 파일 열기 등이 이 단계에서 이루어집니다.
		2) 자원 해제: 객체가 소멸될 때 자원을 해제합니다. 소멸자는 자원을 반환하거나 메모리를 해제하는 등의 작업을 수행합니다.

	3. 장단점
		1) 자원 관리 자동화: 자원을 명시적으로 관리하지 않고 객체의 생성과 소멸을 통해 자동으로 자원을 관리할 수 있습니다. 
			이를 통해 메모리 누수나 파일 핸들 누수 등의 문제를 방지할 수 있습니다.
		2) 예외 안전성: 예외가 발생해도 객체가 파괴될 때 자원이 자동으로 해제되므로 예외가 발생한 경우에도 안전하게 자원이 정리됩니다.

	4. 사용예시
		1) 뮤텍스 잠금 관리 : 생성자에서 lock, 소멸자에서 unlock을 통해 데드락을 예방한다. 

	5. 추가 내용 
		1) 스마트 포인터 활용 : unique_ptr는 소유권을 갖고 있는 객체가 범위를 벗어나면 자동으로 자원을 해제해 주기 때문에, 
			자원 해제를 망각해도 안전하게 해제할 수 있습니다.
		2) 다형성 - 가상소멸자 : 부모 클래스 포인터로 자식 클래스 객체를 삭제할 때 소멸자가 올바르게 호출되도록 보장하기 위해 가상 소멸자가 필요하다
			
			Base* obj = new Derived();
			delete obj; << 여기서 virtual 이 없으면 base의 소멸자만 호출됨



-------------------------------------------------