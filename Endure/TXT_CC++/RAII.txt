Q. RAII(Resource Acquisition Is Initialization) 에 대해 설명하시오 

Q.  RAII와 관련된 예외 안전성(Strong Exception Safety)에 대해 설명하시오 
-------------------------------------------------

Q.	RAII(Resource Acquisition Is Initialization) 에 대해 설명하시오 
A.	
	1. 정의
		C++에서 자원(Resource, 예: 메모리, 파일 핸들 등)을 객체의 생성자에서 획득하고, 소멸자에서 자동으로 해제하는 기법을 말한다.
		즉, 자원의 관리 책임을 객체의 생명 주기에 묶는 방식이다.

	2. 왜 사용하는가
		명시적인 자원 해제를 잊거나 예외 발생 시 자원이 누수되는 문제를 방지하기 위해 RAII를 사용한다.
		객체가 소멸될 때 자동으로 자원이 해제되므로, 메모리 누수, 파일 닫기 실패 같은 오류를 줄이고 코드 안정성을 높인다.

	3. 동작방식
		1) 자원 할당: 객체가 생성될 때 자원을 할당합니다. 예를 들어, 메모리 할당이나 파일 열기 등이 이 단계에서 이루어집니다.
		2) 자원 해제: 객체가 소멸될 때 자원을 해제합니다. 소멸자는 자원을 반환하거나 메모리를 해제하는 등의 작업을 수행합니다.

	4. 특징
		(1) 장점
			자원 해제를 자동으로 처리해 프로그래머 실수를 줄인다.
			예외 안전성을 보장한다.
			코드가 깔끔하고 관리가 쉬워진다.
			
		(2) 단점
			객체 설계 시 RAII 원칙을 잘 이해하고 적용해야 하므로 초기 학습이 필요하다.
			일부 자원은 RAII 패턴으로 관리하기 어려울 수 있다(예: 시스템 자원 중 일부 특수한 경우).

	4. 사용예시
		1) 뮤텍스 잠금 관리 : 생성자에서 lock, 소멸자에서 unlock을 통해 데드락을 예방한다. 

	5. 추가 내용 
		1) 스마트 포인터 활용 : unique_ptr는 소유권을 갖고 있는 객체가 범위를 벗어나면 자동으로 자원을 해제해 주기 때문에, 
			자원 해제를 망각해도 안전하게 해제할 수 있습니다.
		2) 다형성 - 가상소멸자 : 부모 클래스 포인터로 자식 클래스 객체를 삭제할 때 소멸자가 올바르게 호출되도록 보장하기 위해 가상 소멸자가 필요하다
			
			Base* obj = new Derived();
			delete obj; << 여기서 virtual 이 없으면 base의 소멸자만 호출됨

-------------------------------------------------

Q.  RAII와 관련된 예외 안전성(Strong Exception Safety)에 대해 설명하시오 
A. 
	1. 정의
		Strong Exception Safety란 예외가 발생해도 프로그램 상태가 변경되기 전 상태로 완벽하게 복구되는 것을 보장하는 예외 안전성 수준이다.
		즉, 함수가 실패하더라도 프로그램 상태는 “아무 일도 없었던 것처럼” 유지된다.
		
	2. 왜 사용하는가
		예외가 발생했을 때 객체나 자원의 상태가 중간에 불안정하거나 깨지면, 프로그램 버그나 데이터 손상이 생길 수 있다.
		Strong Exception Safety는 이런 문제를 방지해, 예외 상황에서도 프로그램을 안정적으로 유지할 수 있게 해준다.
		
	3. 장점과 단점
		(1) 장점
			예외 발생 시 프로그램 상태가 안전하다.
			디버깅과 유지보수가 쉬워진다.
		
		(2) 단점
			구현이 복잡하고 성능에 약간 부담이 될 수 있다.
			모든 함수에서 강한 예외 안전성을 보장하기 어려울 때가 있다.
	
	4. RAII와의 관계 및 사용 예시
		RAII는 자원을 객체 생명주기에 묶어 관리하기 때문에, 자원 해제가 누락되거나 상태가 불안정해지는 것을 막는다.
		따라서 RAII를 사용하면 함수에서 예외가 발생해도 자원이 자동으로 정리되어 Strong Exception Safety를 달성하기 쉽다.

-------------------------------------------------