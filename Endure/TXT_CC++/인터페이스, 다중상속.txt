Q. 인터페이스에 대해 설명하시오 . 

Q. 추상기능이면 추상클래스를 쓰면 되잖아요 ?

Q. 추상클래스와 인터페이스의 차이는 무엇인가요 ?

Q. 다중 상속의 장단점과 다이아몬드 문제는 무엇인가요? 

Q. 다중 상속과 인터페이스 상속의 차이점은 무엇인가요?

Q. 다이아몬드 문제가 해결됬는데 그럼 인터페이스 말고 추상클래스 쓰면 되는거 아니에요 ?

-------------------------------------------------------

Q. 인터페이스에 대해 설명하시오 . 
A.	인터페이스란 구현을 해야만 하는 추상적인 기능을 말합니다. 
	객체화를 할 수 없고 순수가상함수로만 이루어져있으며, 다중상속을 통해 기능을 구현하도록 할 수 있습니다. 
	[피드백] 여기에 예시를 추가해서 설명하자. 
	예를들어, IInteractable이라는 인터페이스가 있다면, 해당 인터페이스를 상속받은 문, 화단, npc의 경우 
	문이 열리거나 노래가 나오고거래를 할 수 있는 등의 기능을 함수 하나로 대체할 수 있게됩니다. 
	
-------------------------------------------------------

Q. 추상기능이면 추상클래스를 쓰면 되잖아요 ?
A.	추상클래스는 순수가상함수가 1개 이상 있는 클래스로, 일반함수 역시 포함될수 있습니다. 
	이경우 구현이 되어있는 함수이기때문에 다중상속에서 다이아몬드 문제가 생길수 있습니다.  
	
-------------------------------------------------------

Q. 추상클래스와 인터페이스의 차이는 무엇인가요 ?
A.	추상클래스는 순수 가상함수를 하나 이상 갖고있는 클래스입니다. 
	인스턴스를 만들수 없고 일반 메소드를 자유롭게 포함할 수 있으며 말 그대로 추상적인 형태만 제안하고 실제 구현은 자식 클래스로 미루기 위한 용도입니다. 
	그러나 인터페이스는 추상 메소드 만으로만 이루어져 있다는 차이가 있습니다. 
	
-------------------------------------------------------
Q. 다중 상속의 장단점과 다이아몬드 문제는 무엇인가요? 
A.	
	[요약]
		C++의 다중 상속은 여러 클래스의 기능을 재사용할 수 있는 강력한 기능이지만, 
		다이아몬드 문제와 이름 충돌 등으로 인해 실무에서는 인터페이스 상속 중심으로 제한적으로 사용하는 것이 일반적입니다.

	1. 정의
		하나의 클래스가 둘 이상의 클래스로부터 상속받는 것.

	2. 특징
		- 클래스 여러 개에서 멤버 상속 : 각각의 부모 클래스의 멤버 함수, 멤버 변수 모두 상속됨
		- 이름 충돌 가능성 있음	: 두 부모 클래스에 동일한 이름의 멤버가 있을 경우 ambiguity 발생
		- 다이아몬드 상속 문제 발생 가능	 : 두 부모가 같은 조상 클래스를 상속할 때 중복 상속 문제 발생
	
		-1. 장점
			코드 재사용성 ↑ : 여러 부모의 기능을 한 번에 사용할 수 있음
			다양한 기반 클래스를 조합해 객체를 설계할 수 있음
			역할별 클래스 분리 가능 : 예: Drawable, Updatable 등 기능 단위 분리 후 상속 가능
		-2. 단점
			다이아몬드 문제 : 공통 부모가 중복으로 상속되어 객체에 중복 존재
			이름 충돌 : 부모들 사이에 동일한 멤버 함수나 변수 이름 존재 시 ambiguity
			구조 파악 어려움 : 상속 관계가 복잡해질수록 유지보수가 어려워짐
			디버깅 어려움	 : 중복 호출, 잘못된 오버라이딩 등 디버깅이 까다로움

	3. 다이아몬드 문제 
		class A { public: void hello(); };
		class B : public A { };
		class C : public A { };
		class D : public B, public C { }; 
		D와 같은 다중상속에서, D 클래스는 A 클래스의 인스턴스를 두 번 가지게 되어 모호성 발생

		1) 해결 방법
			가상 상속 (virtual inheritance) 사용
-------------------------------------------------------

Q. 다중 상속과 인터페이스 상속의 차이점은 무엇인가요?
A.

	1. 정의
		- 다중 상속: 여러 개의 '구현 클래스'로부터 상속받는 것
		- 인터페이스 상속: 여러 개의 '순수 가상 클래스(Interface)'를 상속받는 것
		
	2. 구현 코드 포함 여부
		- 다중 상속: 부모 클래스에 구현이 포함될 수 있음
		- 인터페이스 상속: 구현 없이 순수 가상 함수만 존재
		
	3. 메모리 구조
		- 다중 상속: 부모 클래스의 멤버를 포함하므로 메모리에 실제 크기 증가
		- 인터페이스 상속: 상태(멤버 변수)가 없어 메모리 영향이 없음
		
	4. 충돌 가능성
		- 다중 상속: 동일한 이름의 멤버 충돌 및 다이아몬드 문제가 발생할 수 있음
		- 인터페이스 상속: 대부분 함수 선언만 하므로 충돌 가능성 낮음
		
	5. 사용 목적
		- 다중 상속: 코드 재사용(상태 + 기능)을 목적으로 함
		- 인터페이스 상속: 역할 분리와 다형성을 위한 구조 설계 목적
		
	6. 실무 사용
		- 다중 상속: 복잡성과 유지보수 문제로 지양됨
		- 인터페이스 상속: 광범위하게 사용됨 (ex. 게임엔진, 프레임워크)
		
	7. 예시
		- 다중 상속:
		  class D : public B, public C { };
		- 인터페이스 상속:
		  class IUpdatable { virtual void Update() = 0; };
		  class IRenderable { virtual void Render() = 0; };
		  class Player : public IUpdatable, public IRenderable { ... };

-------------------------------------------------------

Q. 다이아몬드 문제가 해결됬는데 그럼 인터페이스 말고 추상클래스 쓰면 되는거 아니에요 ?
A.
	추상클래스의 경우 내부에 구현된 함수가 있을경우 다중상속시 충돌이나 혼란의 문제가 생길 수 있습니다. 
	따라서 순수가상함수로만 구성된 인터페이스를 사용하는것이 더 안전합니다. 