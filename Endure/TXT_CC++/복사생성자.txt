Q. 복사 생성자와 이동 생성자의 차이에 대해 설명하시오 

Q. 복사 대입 연산자와 이동 대입 연산자 차이에 대해 설명하시오 . 
-------------------------------------------------

Q. 복사 생성자와 이동 생성자의 차이에 대해 설명하시오 
A.
	1. 정의
		(1) 복사 생성자 (Copy Constructor)
		기존 객체를 복사하여 새로운 객체를 생성하는 생성자다. 보통 객체의 멤버 변수 값을 그대로 복사한다.
		
		(2) 이동 생성자 (Move Constructor)
		기존 객체의 자원을 '이동'(소유권 이전)하여 새로운 객체를 생성하는 생성자다. 복사보다 빠르게 리소스를 전달할 수 있다.

	2. 왜 사용하는가
		복사 생성자는 객체가 복사될 때 깊은 복사(Deep Copy)가 필요한 경우 안전하게 데이터를 복제하기 위해 필요하다.
		이동 생성자는 임시 객체나 불필요한 복사 비용을 줄이고, 리소스 소유권을 효율적으로 이전하여 성능 최적화를 위해 도입되었다.

	3. 특징
		(1) 복사 생성자 (Copy Constructor)
			- 장점 : 객체 상태를 안전하게 복제한다. 
			- 단점 : 큰 객체 복사 시 성능 저하가 발생할 수 있다. 
		
		(2) 이동 생성자 (Move Constructor)
			- 장점 : 복사비용을 줄여 성능 향상이 가능하다. 
					불필요한 메모리 할당과 복사를 방지한다. 
			- 단점 : 이동 후 원본 객체는 유효하지만 정의되지 않은 상태가 될 수 있다. 

			
-------------------------------------------------

Q. 복사 대입 연산자와 이동 대입 연산자 차이에 대해 설명하시오 . 
A.
	1. 정의
		(1) 복사 대입 연산자 (Copy Assignment Operator)
		이미 생성된 객체에 다른 객체의 값을 복사해서 대입하는 연산자다. 보통 깊은 복사를 수행한다.
		
		(2) 이동 대입 연산자 (Move Assignment Operator)
		이미 생성된 객체에 다른 객체의 자원을 이동(소유권 이전)하여 대입하는 연산자다. 복사보다 효율적이며 불필요한 자원 복사를 줄인다.
		
	2. 왜 사용하는가
		복사 대입 연산자는 객체를 안전하게 복사해서 기존 객체에 값을 덮어쓰기 위해 필요하다.
		이동 대입 연산자는 임시 객체나 불필요한 복사를 방지하고, 자원 소유권을 효율적으로 이전하여 성능을 최적화하기 위해 사용한다.

	3. 특징
		(1) 복사 대입 연산자 (Copy Assignment Operator)
			- 장점 : 객체 상태를 안전하게 복제한다
			- 단점 : 큰 데이터를 복사할 때 성능 저하 발생 가능.

		(2) 이동 대입 연산자 (Move Assignment Operator)
			- 장점 : 복사 비용과 메모리 할당을 줄여 빠르게 동작. 
					불필요한 리소스 복사를 피한다. 
			- 단점 : 직접 구현해야 하며, 원본 객체는 유효하지만 상태가 불확실해질 수 있다.
		
