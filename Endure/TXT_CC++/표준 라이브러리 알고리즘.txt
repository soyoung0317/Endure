Q. 표준 라이브러리 알고리즘에 대해 설명하시오.

---------------------------------------

Q. 표준 라이브러리 알고리즘에 대해 설명하시오.
A.
	1. 정의
		C++ 표준 라이브러리 알고리즘은 **반복자(iterator)**를 기반으로 작동하는 범용 함수들로, 정렬, 검색, 복사, 변형, 조건 검사 등을 처리하는 기능을 제공합니다.

	2. 특징
		(1) 장점
			- 효율성: 표준 라이브러리 알고리즘은 전문가들이 최적화했기 때문에 일반적으로 직접 구현한 것보다 더 효율적이에요.
			- 재사용성: 다양한 컨테이너와 데이터 타입에 동일한 알고리즘을 적용할 수 있어요.
			- 가독성: 알고리즘 이름만으로도 코드의 의도를 명확하게 전달할 수 있어요.
			- 버그 감소: 직접 구현할 때 발생할 수 있는 실수를 줄일 수 있어요.

		(2)
			- 추상화로 인한 디버깅 어려움
			- 제한된 컨테이너 호환성

	3. 종류
		- 검색 : find, binary_search 특정 값 찾기
		- 정렬 : sort, stable_sort 데이터 정렬
		- 반복 : for_each 각 요소에 함수 적용
		- 병합 : merge, set_union 등	정렬된 데이터 병합
		- 조건 검사 : all_of, any_of, none_of 조건 만족 여부 검사
		- 제거/복사 : copy, remove, unique, transform 값 복사, 삭제, 변형

	4. 예시
		(1) for_each
			: Unaryfunction for_each(InputIt first, InputIt last, Unaryfunction f)
			: 반환값 for_each(시작 주소값, 요소의 마지막 다음주소, 사용자정의 함수 or 함수객체)
			- 사용자로부터 전달받은 함수 또는 함수객체의 형식으로 반환된다. 
			- 한번 실행하면 끝까지 실행한다는점이 장점이자 단점이다. 

			[예 - 1]
				void print_fnc(int n) {
				    cout << n << " ";
				}	
				for_each(arr, &arr[10], print_fnc); -> arr[0] ~ arr[9] 까지 수행
			[예 - 2]
			    vector<int> v = { 1,2,3,4,5 };
			    vector<int>::iterator itr = v.begin();
				for_each(itr, itr + v.size(), [](auto& n) {    
		        cout << n << " ";
		        });

		(2) 