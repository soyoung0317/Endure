Q. 컴파일 과정에 대해 설명하시오 

Q. 디버그 모드와 릴리즈 모드에 대해 설명하시오 
-------------------------------------------------

Q. 컴파일 과정에 대해 설명하시오 
A. 
	1. 전처리(Preprocessing)
		주석 제거 (Comment Stripping)
		헤더 파일 포함 (Header Inclusion: #include 경로 탐색 후 내용 삽입)
		매크로 치환 (Macro Expansion: #define 적용)
		조건부 컴파일 처리 (Conditional Compilation: #if/#ifdef/#ifndef 등)
		매크로 치환과 파일 삽입을 거쳐 “순수한” C++ 코드로 확장된 후 임시 파일(보통 메모리)로 넘깁니다.

	2. 컴파일(Compilation)
		문법(구문) 분석 → 의미 분석 → 중간 표현(IR) 생성 → 최적화
		최적화된 IR을 바탕으로 각 함수·클래스별 "기계어 코드"로 변환
		CPU 비종속 최적화 (Target-Independent Optimizations: 불필요 코드 제거, 상수 접기 등)
		CPU 종속 최적화 (Target-Dependent Optimizations: 인라인 확장, 루프 변환, 레지스터 할당 등)
		▶출력: 어셈블리 코드(.s 또는 내부 포맷)

	3. 어셈블리(Assembly)
		어셈블러가 기계어(opcode)와 데이터 레이아웃을 실제 바이너리 형식으로 변환
		목적 파일에는 기계어 명령, 심볼 테이블(함수·전역변수 이름) 정보 등이 담깁니다.
		▶출력: 오브젝트 파일(.o 또는 .obj)

	4. 링킹(Linking)
		심볼(함수·변수 이름) 참조를 해소하여 하나의 실행 파일 또는 라이브러리로 결합
		정적 링킹(static)일 때는 모든 코드가 실행 파일에 포함되고,
		동적 링킹(dynamic)일 때는 외부 DLL/SO를 로드할 정보만 남습니다.
		= 오브젝트 코드와 라이브러리와 연결되어 실행파일을 만든다.
		출력: 실행 파일(.exe 등) 또는 공유 라이브러리
	
-------------------------------------------------

Q. 디버그 모드와 릴리즈 모드에 대해 설명하시오 
A. 
	1. 디버그 모드
		정의 : 개발 중에 오류를 쉽게 찾고 수정할 수 있도록, 디버깅에 필요한 정보(예: 디버그 심볼, 함수 호출 스택, 변수 값 등)를 포함하고 최적화가 최소화된 빌드 방식입니다.
		특징 :
			- 컴파일러 최적화가 제한적입니다.
			- 추가적인 로그와 검사 코드가 포함되어 있어 실행 속도는 상대적으로 느릴 수 있습니다.
		장점:
			- 상세한 디버깅 정보 제공으로 오류 탐지가 용이함
			- 코드의 흐름과 변수 상태를 추적하기 쉬움
		단점:
			- 최적화가 제한되어 실행 속도가 느림
			- 바이너리 파일 크기가 커져 메모리 사용량이 많을 수 있음

	2. 릴리즈 모드
		정의:최종 사용자에게 배포할 제품을 만들기 위한 빌드 방식으로, 컴파일러 최적화가 활성화되어 실행 성능이 극대화되고, 디버깅 정보가 제거되어 바이너리 크기 및 보안성이 향상됩니다.
		특징:
			- 고급 최적화 옵션이 적용되어 실행 속도와 메모리 사용이 효율적입니다.
			- 디버깅에 필요한 정보가 축소되거나 제거됩니다.
		장점:
			- 고급 최적화로 인해 빠른 실행 속도와 효율적인 자원 사용
			- 디버깅 정보가 제거되어 보안성이 향상되고, 최종 배포용으로 적합함
		단점:
			- 디버깅 정보가 없기 때문에, 실행 중 오류 발생 시 원인 파악이 어려움
			- 최적화 과정에서 발생할 수 있는 순서 의존적 버그나 초기화 문제가 나타날 가능성 존재

-------------------------------------------------