Q. SOLID원칙에 대해 설명하시오. 

Q. SOLID원칙을 지켜야 하는 이유 무엇인가 ?

-------------------------------------------------

A. (24.11.19) 
	SOLID원칙은 객체지향 프로그래밍에서 프로그램을 만들기위한 일종의 지침으로 다섯가지 원칙을 이루는 말이다. 

	첫번째로, SRP즉 단일책임원칙은 하나의 클래스는 하나의 책임을 가져야한다는 말이다. 
	예를들어, 책이라는 클래스 안에서 책에 대한 정보, 저장, 출력 등 여러가지 책임을 동시에 있을경우, 저장방식을 변경하려고 할 때 책 정보와 관련된 부분까지 영향을 받을 수 있습니다. 
	따라서, 각각의 클래스로 나누어 책임을 나누게 되면 코드의 수정과 확장에 용이해집니다. 
	
	두번째로, OCP 즉 개방폐쇠원칙은 확장에는 열려있고 수정에는 닫혀있다는 말로 기존코드를 수정하여 새로운 버그가 발생할 가능성을 차단할 수 있습니다. 
	예를들어, 플레이어의 무기에 따라 공격하는 방식이 다르다고 했을때, 
	플레이어가 현재 사용중인 무기를 if문으로 분기하여 a일떄, b일때, ... 이렇게 나누게 되면 내부적으로 매우 복잡한 과정을 거치게된다. 
	따라서, 이경우 여러 무기를 Weapon이라는 클래스를 통해 상속을 받고, 메서드 오버라이딩을 통해 공격을 구현한다면 무기가 추가되더라도 여러 문제에서 자유로워질 수 있습니다. 
	
	세번째로, LSP 즉 리스코프 치환법칙의경우, 자식클래스는 부모클래스를 대체할 수 있어야한다는것입니다. 
	만약 운송수단 이라는 클래스에서 모든 차량에서 쓸수있게 엔진을 켜고 끄는 기능을 정의하고 새로운 운송수단으로 자전거가 추가되었다면
	이 자전거 클래스는 엔진이 없기때문에 엔진관련 메서드를 호출할 수 없습니다. 
	이로인해 예기치 않은 예외가 발생할 수 있기때문에 엔진을 인터페이스로 정의하여 동작을 구분시켜 확장이 용이하도록 바꿔야 합니다. 

	네번째로 ISP 즉 인터페이스 분리법칙의경우, 클래스는 자신이 사용하지 않을 메서드를 사용하도록 강요받지 않아야 한다는 의미로 , 이경우 큰 덩어리의 인터페이스를 작은 단위로 분리하게합니다. 
	예를들어, 가전제품을 관리하는 스마트 라는 큰 인터페이스에서 전원을 켜고 끄고, 인터넷을 연결하고 화면을 터치하는 기능이 포함될수 있다고 가정해봅시다. 
	만약 전구와 같은 제품은 화면을 터치하는 기능이 필요하지 않을 수 있습니다.
	따라서, 각 기능별로 작은 인터페이스를 만들어 전구는 전원을 켜고 끄는 기능만을 구현하고 tv는 전원을 켜고 끄고 인터넷을 연결하도록 하는 기능을 구현하도록 하여 
	코드의 유연성과 효율성을 높이도록 합니다. 
	
	다섯번째로 DCP 즉 의존 역전 원칙의 경우, 고수준 모듈이 저수준 모듈에 의존해서는 안된다는 의미입니다. -> 추상화에 의존해야한다. 
	예를 들어, 스위치(Switch) 클래스에 활성화 상태에 따라 문을 열고 닫는 기능이 포함되어 있다면, 만약 문 외에도 함정이나 기믹 요소와 같은 새로운 기능들이 추가될 때마다, 
	스위치 클래스는 각각의 기능에 맞게 수정해야 합니다. 이렇게 되면 스위치 클래스가 점점 더 복잡해지고, 새로운 기능을 추가할 때마다 변경해야 하는 부분이 많아집니다.
	따라서, 스위치(Switch) 클래스가 구체적인 기능에 의존하지 않도록, Switchable클래스를 추상화하여, 추상화된 클래스에 의존하도록 구현해야 합니다. 
	이렇게 하면, 스위치 클래스의 수정 없이 확장성을 확보할 수 있고 종속성을 완화할 수 있습니다. 
	
-------------------------------------------------
	
A. (24.11.19) 
	느슨한 결합과 높은 응집력을 통해 개발과정에서의 문제를 예방하고 코드의 재사용성을 높이고 유지보수를 용이하게 하기위함입니다. 