Q. TCP와 UDP에 대해 설명하시오.

Q. TCP 연결 시 3-way 핸드쉐이크 과정에 대해 설명하시오.

Q. UDP의 비신뢰성이 게임에 미치는 영향과 보완 방법은 무엇인가요?

Q. TCP와 UDP를 선택할 때 고려해야 할 요소는 무엇인가요?
-------------------------------------------------

Q. TCP와 UDP에 대해 설명하시오.
A.
	1. 정의
		a. TCP (Transmission Control Protocol) : 
			TCP는 연결 지향형 프로토콜로, 데이터를 전송하기 전에 송신자와 수신자 간에 연결(세션)을 확립합니다. 
			데이터가 순차적으로 도착하고 손실될 경우 재전송하는 등의 신뢰성 있는 전송 메커니즘을 제공합니다.
		b. UDP (User Datagram Protocol)
			UDP는 비연결형 프로토콜로, 별도의 연결 설정 없이 독립적인 데이터그램 단위로 데이터를 전송합니다. 
			전송의 신뢰성이나 순서 보장을 제공하지 않지만, 오버헤드가 적고 빠른 전송이 가능합니다.

	2. 사용하는 이유 
		a. TCP 사용 이유
			신뢰성 보장:
				데이터 전송 시 손실, 중복, 순서 뒤바뀜 등을 자동으로 검출하고 복구하는 메커니즘(재전송, 순서 제어 등)을 갖추어 데이터의 정확한 도착을 보장합니다.
			연결 관리:
				세션을 통해 연결 상태를 유지하며, 흐름 제어 및 혼잡 제어 알고리즘을 사용해 네트워크 상태에 따라 전송 속도를 조절합니다.
		
		b. UDP 사용 이유
			낮은 지연과 오버헤드:
				연결 설정 단계가 없고, 단순한 헤더 구조로 인해 전송 지연이 매우 적습니다.
			실시간 전송:
				데이터 신뢰성보다 빠른 전달이 요구되는 애플리케이션(예: 온라인 게임, VoIP, 스트리밍)에 적합합니다.

	3. 장점과 단점
		a. TCP
			장점:
				데이터의 정확한 전송 보장 (신뢰성, 순서 보장)
				에러 검출 및 복구 기능 (재전송, 흐름 제어, 혼잡 제어)
			단점:
				연결 설정 및 관리로 인한 오버헤드가 존재하여 실시간성이 중요한 애플리케이션에는 부적합할 수 있음
				패킷 지연이 발생할 가능성이 있음

		b. UDP
			장점:
				간단한 구조로 인해 전송 오버헤드가 적고, 빠른 전송이 가능함
				실시간 전송이 필요한 상황(예: 게임, 음성/영상 통화)에 적합
			단점:
				신뢰성 보장이 없으므로 데이터 손실, 중복, 순서 오류가 발생할 수 있음
				흐름 제어나 혼잡 제어 기능 부재로 네트워크 상황에 따라 성능 저하 가능성 있음

	4. 사용 예시
		a. TCP 사용 예시
			웹 브라우징 및 데이터 전송: HTTP/HTTPS, FTP 등에서 안정적인 데이터 전송이 요구되는 경우
			이메일 및 원격 접속: SMTP, POP3, IMAP, SSH 등
		b. UDP 사용 예시
			온라인 게임: 실시간 위치, 상태 업데이트 등 빠른 응답이 필요한 데이터 전송에 주로 사용
			실시간 통신:	VoIP, 실시간 스트리밍 등에서 지연을 최소화하기 위해 사용
			DNS 질의: 빠른 이름 해석을 위해 사용됨
-------------------------------------------------

Q. TCP 연결 시 3-way 핸드쉐이크 과정에 대해 설명하시오.
A.	1. 정의
		TCP 연결 시 3-way 핸드쉐이크는 클라이언트와 서버 간에 신뢰성 있는 연결을 설정하기 위한 절차입니다. 
		이 과정을 통해 양측은 서로의 시퀀스 번호를 동기화하고, 데이터 전송 전에 연결이 정상적으로 구성되었음을 확인할 수 있습니다.

	2. 단계별 과정
		① SYN (Synchronize) - 클라이언트 → 서버
			목적 : 연결 시작 의사를 표시하고, 이후 데이터 전송을 위한 시퀀스 번호 기반의 동기화를 시작합니다.
			설명 : 클라이언트가 서버에 연결을 요청할 때, 자신의 초기 시퀀스 번호(Initial Sequence Number, ISN)를 포함한 
				SYN 패킷을 전송합니다.
			
		② SYN-ACK (Synchronize-Acknowledge) - 서버 → 클라이언트
			설명 : 서버는 클라이언트의 SYN 패킷을 수신하면, 자신의 초기 시퀀스 번호와 함께 SYN-ACK 패킷을 전송합니다.
			세부 내용 : 
				ACK 번호는 클라이언트의 ISN에 +1을 더한 값으로 설정되어, 클라이언트의 요청을 확인합니다.
				동시에 서버는 자신의 연결 요청 의사를 표현하기 위해 SYN 플래그를 설정합니다.

		③ ACK (Acknowledge) - 클라이언트 → 서버
			설명 : 클라이언트는 서버가 보낸 SYN-ACK 패킷을 수신하고, 
					서버의 시퀀스 번호에 대한 확인 응답(ACK)을 보내면서 연결을 확정합니다.
			결과 : 이 단계가 완료되면, 양측은 연결이 정상적으로 설정되었음을 확인하고, 이후 데이터 전송이 시작될 수 있습니다.

	3. 왜 이 과정을 사용하는가
		a. 신뢰성 확보 : 3-way 핸드쉐이크 과정을 통해 연결의 양쪽이 모두 준비되었음을 확인할 수 있으며, 
				데이터 전송 전 초기 시퀀스 번호를 동기화함으로써 패킷의 순서 및 무결성을 유지할 수 있습니다.
		b. 연결 상태 관리 : 이 과정을 통해 클라이언트와 서버는 서로의 존재와 통신 가능 상태를 확인하므로, 
			이후 발생할 수 있는 네트워크 오류나 혼선에 대비할 수 있습니다.

	4. 연결 실패 시 처리 방법
		핸드쉐이크 과정 중 어느 한 단계에서 응답이 없거나 오류가 발생하면, 
		클라이언트는 재전송하거나 연결 실패를 판단하여 적절한 예외 처리를 수행합니다

-------------------------------------------------

Q. UDP의 비신뢰성이 게임에 미치는 영향과 보완 방법은 무엇인가요?
A.	UDP는 빠른 전송 속도와 낮은 오버헤드를 제공하지만, 비신뢰적 특성 때문에 패킷 손실, 
	순서 뒤바뀜, 중복 전송 등의 문제가 발생할 수 있습니다. 
	이러한 문제는 게임 클라이언트에서 실시간으로 상태를 주고받을 때 다음과 같은 영향을 미칩니다.

	1. UDP의 비신뢰성이 게임에 미치는 영향
		a. 패킷 손실 : 네트워크 상황에 따라 일부 데이터그램이 전송 중 손실될 수 있습니다. 
				예를 들어, 플레이어의 위치나 행동 정보가 누락되면 게임 상태가 일시적으로 부정확하게 표시되어, 
				캐릭터의 움직임이 끊기거나 불안정해질 수 있습니다.
		b. 패킷 순서 불일치 : UDP는 전송 순서를 보장하지 않으므로, 도착한 패킷의 순서가 엇갈릴 수 있습니다. 
				이로 인해 게임 내 상태 업데이트가 예상치 못한 순서로 처리되어, 갑작스러운 위치 변화나 애니메이션 불일치 등이 발생할 수 있습니다.
		c. 중복 전송 : 네트워크 상황에 따라 동일한 데이터그램이 중복 도착할 가능성이 있습니다. 적절한 처리가 이루어지지 않으면, 
				중복된 정보로 인해 불필요한 업데이트가 이루어지거나 상태가 왜곡될 수 있습니다.

	2. UDP의 비신뢰성을 보완하는 방법
		게임에서는 실시간성이 매우 중요하기 때문에 UDP의 빠른 전송 이점을 살리면서도 그 한계를 극복하기 위한 다양한 보완 기법을 적용합니다.

		시퀀스 번호와 타임스탬프 사용:
			각 데이터그램에 고유의 시퀀스 번호와 타임스탬프를 포함시켜, 패킷의 순서를 확인하고 누락된 패킷을 감지할 수 있습니다. 
			클라이언트와 서버는 이를 기반으로 데이터 재정렬 및 중복 제거 로직을 구현합니다.
			
		예측 및 보간 (Interpolation and Prediction):
			만약 패킷 손실이 발생하더라도, 이전 상태를 바탕으로 현재 상태를 예측하거나 보간(interpolation)을 통해 부드러운 움직임을 유지합니다.
			이 방법은 네트워크 지연이나 일시적인 데이터 누락 시 게임 플레이의 자연스러움을 보장합니다.
			
		주기적인 상태 동기화:
			UDP 전송의 단점을 보완하기 위해, 일정 간격으로 전체 게임 상태를 재전송하여 클라이언트와 서버 간의 동기화를 재확인합니다.
			이를 통해 누락되거나 잘못 처리된 데이터를 보완할 수 있습니다.
			
		핵심 데이터에 대한 별도의 신뢰성 보장:
			게임의 중요한 이벤트(예: 로그인, 게임 시작, 중요한 게임 이벤트)나 트랜잭션에 대해서는 UDP 외에 TCP나 자체적인 재전송 메커니즘을 도입해 
			신뢰성을 보장하는 하이브리드 접근 방식을 사용하기도 합니다.
			
		애플리케이션 레벨의 오류 처리:
			UDP의 한계로 인한 문제를 감지하고, 오류 복구를 위한 로직(예: 재요청, 오류 로그 기록 등)을 애플리케이션 레벨에서 구현하여 게임의 안정성을 높입니다.
-------------------------------------------------

Q. TCP와 UDP를 선택할 때 고려해야 할 요소는 무엇인가요?
A.

-------------------------------------------------