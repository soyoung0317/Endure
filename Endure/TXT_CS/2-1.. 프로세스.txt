Q. 프로세스에 대해 설명하시오 

Q. Multi process에 대해 설명해보세요.

Q. Multi process와 Multi thread의 차이를 설명해보세요.

Q. 멀티 프로세스로 처리가능한것을 멀티 쓰레드에서 수행하는 이유는 ? 
---------------------------------------------------

Q. 프로세스에 대해 설명하시오 
A. 1. 정의 
		프로세스(Process)는 실행 중인 프로그램
		메모리에 적재되고 CPU 자원을 할당받아 프로그램이 실행되고 있는 상태

	2. 특징
		(1). 독립된 메모리 공간
			- 프로세스마다 독립적인메모리 공간을 가지므로, 다른 프로세스와 메모리 내용을 직접 공유하지 않습니다
				(공유 영역이 설정된 특별한 경우 제외).
			- 이 때문에 프로세스 간 직접 접근/변경이 불가능하고, 안전성을 높일 수 있지만, 
				프로세스 간 통신(IPC, Inter-Process Communication)을 통해 데이터를 주고받아야 하는 추가 작업이 발생할 수 있습니다.

		 (2). 운영체제 에서의 스케줄링 단위
			- 운영체제는 여러 프로세스를 동시에 실행 가능한 형태(멀티태스킹)로 만들어주며, 
				CPU 스케줄링에 따라 프로세스들을 번갈아가며 CPU를 할당합니다.

	3. 프로세스 제어블록 (Process Control Block, PCB)
		프로세스가 만들어 지면 시스템에서는 프로세스 제어 블록(PCB)의 형태로 존재하게 됩니다. (테이블 모양의 자료구조)
		즉 프로세스가 만들어지면 이 프로세스의 정보를 표현하는 PCB가 생성되는 것입니다.
		이 PCB에 대한 작업은 매우 빈번하게 이뤄지기 때문에 메모리에 저장을 시킵니다.
		
		(1) PCB에 저장된 정보
			프로세스 번호(Process Indentification Number, PID) : 프로세스의 고유한 정수 번호, 다른 프로세스와의 구별을 위해 사용
			프로세스의 상태 : 준비(Ready), 실행(Running), 대기(Blocked), 보류(Suspended) 등의 상태를 나타냄.
			프로세스 우선순위 : 스케줄링 할 떄 사용되는 우선순위
			프로그램 카운터 값(PC) : 다음 실행될 명령어의 주소 값
			메모리 포인터 : 프로그램과 데이터가 저장되어 있는 메모리 블록 위치와 공유되는 메모리 블록들에 대한 포인터 포함
			문맥 데이터 : 문맥교환 시에 CPU 레지스터 값들을 저장하는 영역
			할당받은 자원들에 대한 목록 : 개방한 파일 등 할당 받은 자원들의 정보
			계정 정보 : CPU를 사용한 시간 등의 정보
			입출력 정보 : 진행 중인 입출력 요구 등의 정보

	4. 프로세스의 상태(Process State)와 변화
		프로세스는 실행(Running), 준비(Ready), 대기(Waiting, Blocked), 종료(Terminated) 상태 등을 오가며 실행됩니다.

		생성상태 -> 준비상태
			미리 정의된 정책에 따라 스케줄러에 의해 호출, 이때 메모리의 이용 가능성과 어떤 장치가 요구되는지를 검사한다.
		준비상태 -> 실행상태
			사전에 정의된 알고리즘(FCFS, SJF, SRT, RR등)에 따라 스케줄러에 의해 처리된다. 이 과정을 디스패치라고 한다.
		실행상태 -> 준비상태
			할당시간의 만료나 우선순위 알고리즘을 택하고 있는 시스템에서 높은 우선순위의 프로세스가 오는 경우 스케줄러에 의해 처리된다.
		실행상태 -> 대기상태
			READ, WRITE 또는 다른 I/O 요구, 페이지 교환을 요구하는 작업 같은 명령 등에 의하여 일어난다.
			이러한 작업은 상대적으로 오랜 시간이 걸리기 때문에 그동안 CPU를 다른 프로세스에 할당하여 활용하기 위함이다.
		대기상태 -> 준비상태
			I/O 장치 관리자의 신호에 의해 일어난다.
			페이지 교환의 경우 페이지 인터럽트 핸들러가 메모리에 그 페이지가 있다는 신호를 보내게 되며, 프로세스는 준비 큐에 놓이게 된다.
		실행상태 -> 종료상태
			프로세스를 성공적으로 끝마친 경우, 혹은 운영체제가 에러 발생을 감지하고 프로세스를 강제로 종료시킨 경우에 스케줄러에 의해 실행된다.

---------------------------------------------------

Q. Multi process에 대해 설명해보세요.
A.
	1. 정의
		멀티 프로세스(Multi-Process)는 운영체제에서 여러 개의 프로세스가 동시에 실행되는 방식을 의미합니다.
		각 프로세스는 독립된 메모리 공간과 자원을 가지며, 병렬 또는 병행 실행이 가능합니다.

	2. 특징
		- 각 프로세스는 독립적인 주소 공간을 사용 → 안정성과 보안이 뛰어남
		- 한 프로세스가 종료되어도 다른 프로세스에 영향 없음
		- Context Switching 비용이 크고 IPC(프로세스 간 통신)이 필요함
		- 멀티코어 CPU에서 병렬 실행이 가능

		(1) 장점
			하나의 프로세스가 죽어도 다른 프로세스에 영향 없음 → 안정성 높음
			메모리 보호가 쉬움 (주소 공간이 분리됨)
			병렬 처리에 유리 (멀티코어 활용 가능)

		(2) 단점
			문맥 교환 비용 높음 (캐시 초기화, 레지스터 저장 등)
			프로세스 간 데이터 공유 어려움 → IPC 필요
			메모리 사용량이 많아짐
---------------------------------------------------

Q. Multi process와 Multi thread의 차이를 설명해보세요.
A.
	1. 정의
		(1 )멀티 프로세스 (Multi-Process)
			여러 개의 독립된 프로세스를 동시에 실행하는 방식.
			각 프로세스는 독립적인 메모리 공간을 가짐.
			
		(2) 멀티 스레드 (Multi-Thread)
			하나의 프로세스 내에서 여러 스레드가 동시에 실행되는 방식.
			스레드는 메모리와 자원을 공유하며 실행됨.

	2. 정리
		(1) 멀티 프로세스	
			독립된 메모리 사용
			하나 죽어도 다른 프로세스 영향 없음 (안정성 높음)	
			문맥 교환 비용 큼 → 느릴 수 있음
			IPC 필요 (복잡함)
			Chrome 웹브라우저, 서버 프로세스 분리 등
		(2) 멀티 스레드
			메모리와 자원 공유
			하나의 스레드 오류 시 전체 프로세스에 영향 가능 (안정성 낮음)
			문맥 교환 빠름 → 상대적으로 빠름
			공유 메모리로 간단함
			게임 엔진, GUI + 백그라운드 작업 병행 등

---------------------------------------------------

Q. 멀티 프로세스로 처리가능한것을 멀티 쓰레드에서 수행하는 이유는 ? 
A. 주로 자원 공유와 성능 최적화 때문입니다. 
	멀티 프로세스는 프로세스 간 메모리가 분리되어 있지만 멀티 쓰레드는 같은 프로세스의 메모리를 공유하므로, 
	바로 접근할 수 있어 통신 오버헤드가 훨씬 적고 구현도 간단합니다.
