Q. 가상메모리에 대해 설명하시오

Q. 페이지 폴트

Q. 교체 알고리즘

Q. 스와핑에 대해 설명하시오 

Q. 쓰레싱에 대해 설명하시오. 

 ------------------------------------

 Q. 가상메모리에 대해 설명하시오
 A. 1. 정의
		: 운영체제(OS)가 물리 메모리(RAM)의 용량보다 큰 메모리를 사용할 수 있도록 해 주는 기술
		: 프로그램이 사용하는 주소 공간(가상 주소)을 실제 물리 메모리 주소와 분리하여 관리함으로써, 
		 효율적인 메모리 활용과 프로세스 간 메모리 보호를 가능하게 만든다.

	2. 특징
		- 메모리 용량 확장
		: 모든 프로그램을 실행하기에 실제 물리 메모리가 부족할 때, 
		가상 메모리를 사용해 일부 데이터를 디스크(하드디스크, SSD 등)에 임시로 보관한다. 
		이렇게 하면 프로그램은 실제 물리 메모리 크기보다 큰 주소 공간을 사용하는 것처럼 동작할 수 있습니다.
		
		- 메모리 보호와 독립성
		: 가상 메모리를 사용하면, 각 프로세스는 독립된 가상 주소 공간을 가집니다. 
		한 프로세스가 다른 프로세스의 메모리에 잘못 접근하는 문제가 줄어들고, 시스템 전반의 안정성이 높아집니다.
		
		- 프로그램 로딩 및 스와핑
		: 필요한 부분만 물리 메모리에 로드하고, 사용하지 않는 부분은 디스크로 내보내는(스왑) 방식으로 메모리를 효율적으로 쓸 수 있게 해 줍니다.

	3. 동작 원리
		1). 가상 주소와 물리 주소 매핑
			* 가상 주소(Virtual Address): 프로세스가 인식하는 주소 공간
			* 물리 주소(Physical Address): 실제 RAM 상의 주소
			MMU(Memory Management Unit)는 해당 가상 주소를 페이지 테이블(Page Table) 등을 통해 실제 물리 주소로 변환합니다.
		
		2). 페이징
			가상 메모리 시스템에서 일반적으로 페이지(Page) 단위로 메모리를 관리합니다.
			물리 메모리 역시 프레임(Frame)이라는 동일한 크기로 나누어, 필요한 페이지를 프레임에 매핑합니다.
			
		3). 페이지 테이블(Page Table)
			각 프로세스마다 가상 페이지 번호를 물리 프레임 번호와 매핑해둔 자료구조
			CPU가 가상 주소에 접근할 때, 해당 주소의 페이지 번호를 인덱스로 하여 페이지 테이블을 조회하고, 변환된 물리 주소로 접근합니다.

				[3+] 페이지 테이블 엔트리(Page Table Entry, PTE) 안에 있는 ‘유효 비트(Valid/Present bit)’ 등을 통해 
				해당 가상 페이지가 실제 물리 메모리에 매핑되어 있는지를 확인합니다.
				
				1. 가상주소를 페이지번호, 오프셋으로 분리하고
				2. 해당 페이지 테이블에서 가상 페이지 번호에 해당하는 페이지 테이블 엔트리를 확인한다. 
				3. 페이지 테이블 엔트리에 있는 유효비트를 확인하는데, 1(true)면 물리메모리에 있으므로 해당 주소에 접근한다. 
					0(false)일경우 현재 물리메모리에 없거나 페이지 테이블에서 유효하지 않은 매핑이므로 페이지 폴트가 발생한다. 
		
		4). 페이지 폴트(Page Fault)	
			CPU가 참조하려는 가상 주소가 현재 물리 메모리에 없을 때 발생
			디스크(스왑 영역)에서 필요한 페이지를 물리 메모리로 불러오고, 페이지 테이블에 매핑 정보를 "갱신"한 뒤 재시도합니다.

	4. 장점
		- 메모리 효율적 사용: 필요할 때만 물리 메모리를 할당하고, 사용하지 않는 메모리는 디스크에 두어 전체적으로 메모리를 더 잘 활용할 수 있습니다.
		- 프로그램 크기 제한 완화: 물리 메모리가 작아도, 큰 프로그램을 부분적으로 로드하며 실행할 수 있습니다.
		- 메모리 보호: 프로세스마다 독립적인 주소 공간을 가지므로, 잘못된 포인터 연산이나 오류가 다른 프로세스의 메모리를 침범하는 일을 막을 수 있습니다.

	5. 단점
		- 속도 저하: 디스크 I/O는 RAM보다 훨씬 느리므로, 스왑(디스크로부터/로의 페이지 이동)이 자주 발생하면 시스템 성능이 크게 떨어질 수 있습니다.
		- 페이지 폴트 오버헤드 : 페이지 폴트가 자주 발생하면 디스크 I/O가 빈번해져 성능 저하가 발생할 수 있습니다(스래싱(Thrashing) 현상).
		- 디스크 공간 사용: 실제 물리 메모리가 부족할 경우 스왑 공간이 필요하고, 이로 인해 디스크 사용량이 늘어날 수 있습니다.
		- 스왑 공간: 디스크에 스왑 영역(Swap Space)을 마련해야 하며, 이 영역의 크기나 디스크 성능도 시스템 퍼포먼스에 영향을 줍니다.
		
 ------------------------------------
		
Q. 페이지 폴트
A. 1. 정의
	CPU가 참조하려는 가상 주소(Virtual Address)가 현재 물리 메모리에 적재되지 않았을 때 발생하는 예외(Interrupt)

	2. 원인
		1). 해당 페이지가 스왑 영역에 있음
			프로세스가 필요로 하는 모든 페이지가 항상 물리 메모리에 올라오는 것은 아닙니다.
			물리 메모리가 부족하거나, 아직 참조되지 않은 페이지는 디스크(스왑 영역)에 존재합니다. 
			CPU가 그 페이지를 처음 참조하려 할 때 “현재 물리 메모리에 없다”는 사실이 확인되면 페이지 폴트가 발생합니다.
		
		2). 잘못된 주소 접근
			잘못된 포인터로 접근하는 등, 프로세스가 접근 권한이 없는 주소 또는 존재하지 않는 주소에 접근하려 할 경우에도 페이지 폴트가 발생할 수 있습니다.
			이 경우에는 운영체제가 해당 접근을 “비정상적인 접근”으로 판별하고, 세그멘테이션 폴트(SEGFAULT) 등으로 처리할 수도 있습니다.

 ------------------------------------

Q. 교체 알고리즘
A. 페이지 폴트(Page Fault) 발생 시 물리 메모리가 이미 꽉 찬 상태라면 “어떤 페이지를 내보낼지(스왑 아웃할지)” 결정해야 합니다. 
	FIFO, OPT, LRU, LFU, Clock 알고리즘 등이 있습니다. 

	1. FIFO (First-In, First-Out)
		물리 메모리에 가장 먼저 들어온 페이지를 가장 먼저 내보내는 방식입니다.
		즉, “가장 오래된 페이지”를 교체 대상으로 삼습니다.

		구현이 단순합니다. 큐(Queue)에 넣어 관리하기만 하면 됩니다.
		실제 사용량과 무관하게 가장 먼저 들어온 페이지부터 내보내므로, 자주 사용하는 페이지가 교체되어 성능이 떨어질 수 있습니다.

	2. OPT (Optimal, 최적 교체)
		앞으로 접근할 페이지의 정보를 미리 완벽하게 안다고 가정하고, 가장 나중에 사용될 페이지를 교체하는 방식입니다.
		이론적으로 가장 적은 페이지 폴트를 발생시키는 최적의 알고리즘입니다.
		실제 시스템에서 “앞으로 접근할 페이지”를 미리 알 수 없으므로, 구현이 불가능하거나 예측 알고리즘을 써야만 합니다(그럼에도 완벽하진 않음).

	3. LRU (Least Recently Used)
		“가장 오랫동안 사용되지 않은 페이지”를 교체 대상으로 삼습니다.
		과거 접근 패턴이 미래의 접근 패턴과 어느 정도 유사할 것이라는 지역성(Locality)을 가정하고 있습니다.

		실제 사용 이력을 기준으로 하여, 빈번히 사용되는 페이지가 교체될 확률을 낮춥니다.
		“사용 시점”을 추적해야 하므로, 구현 복잡도가 올라갑니다(하드웨어 지원이나 소프트웨어적 관리가 필요).

	4. LFU (Least Frequently Used)
		일정 기간(혹은 전체 기간) 동안 가장 적게 참조된 페이지를 교체합니다.
		접근 횟수(빈도)를 기준으로 판단합니다.

		자주 사용되는 페이지는 남겨두고, 거의 사용하지 않는 페이지를 우선 제거하기 때문에 논리적입니다.
		구현 시 참조 횟수를 업데이트하고, 우선순위를 갱신하는 비용이 발생합니다.

	5. Clock (Second Chance) 알고리즘
		사용 여부 비트(Reference Bit) 로 최근 참조 여부를 확인해 한 번 더 기회를 주는 방식
		물리메모리를 순회하면서 참조비트가 0인 페이지를 만나면 해당 페이지를 교체합니다. 

		FIFO에 비해 폴트율이 낮고 구현이 상대적으로 간단합니다. 

 ------------------------------------

Q. 스와핑에 대해 설명하시오 
A. 현재 사용되지 않는 프로세스들을 보조기억장치의 일부 영역(스왑영역)으로 쫒아내고 빈 공간에 새 프로세스를 적재하는것을 의미합니다. 

	장점 : 실제 메모리 크기 보다 큰 프로세스들을 사용할 수 있다. 

 ------------------------------------

Q. 쓰레싱에 대해 설명하시오. 
A.  1. 정의
		페이지 부재(Page Fault) 가 과도하게 발생하여 디스크 스왑(Swap) 작업에 지나치게 많은 시간을 소모하고, 
		실제 사용자 프로그램의 실행은 거의 이루어지지 않는 상태를 말합니다.