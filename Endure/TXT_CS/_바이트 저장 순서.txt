Q. 비트와 바이트 

Q. 바이트 저장 순서

Q. 빅 엔디안에 대하여

Q. 리틀 엔디안에 대하여 

Q. 빅 엔디안 VS 리틀 엔디안 
------------------------------
Q. 비트와 바이트 
A.	bit = 컴퓨터가 데이터를 처리하기 위해 사용하는 데이터의 최소 단위 
	비트에는 2진수값 (0과 1)을 단 하나만 저장할 수 있다. 
	byte = 비트 8개가 모여서 구성되며 한 문자를 표현할 수 있는 최소단위 이다. 

Q. 바이트 저장 순서
A.	컴퓨터가 저장하는데이터는 32비트 혹은 64비트로 구성된다. 
	바이트가 저장되는 순서에 따라 빅 엔디안 / 리틀 엔디안 으로 나뉜다. 


Q. 빅 엔디안에 대하여
A.	낮은 주소에 데이터의 높은 바이트(MSB, Most Significant Bit) 부터 저장하는 방식
	평소 숫자를 사용하는 선형 방식과 같은 방식
	메모리에 저장된 순서 그대로 읽을 수 있으며, 이해하기 쉽다. 
	EX. SPARC을 포함한 대부분의 RISC CPU계열에서 이 방식으로 데이터를 저장한다. 
	EX. 0x12345678 , 32비트 크기 정수 
	-> 0x12, 0x34, 0x56, 0x78로 1바이트 4개가 구성된다.
	이 4개의 1바이트 값을 빅 엔디안 방식으로 저장
	<메모리>
	0x12 << 낮은 주소 (MSB)
	0x34
	0x56
	0x78 << 높은주소 (LSB)
Q. 리틀 엔디안에 대하여 
A.	낮은 주소에 데이터의 낮은 바이트(LSB, Least Significant Bit) 부터 저장하는 방식
	평소 숫자를 사용하는 선형방식과 반대로 거꾸로 읽어야 한다. 
	<메모리>
	0x78 << 낮은 주소 (MSB)
	0x56
	0x34
	0x12 << 높은주소 (LSB)
	
Q. 빅 엔디안 VS 리틀 엔디안 
A.	저장해야할 큰 데이터를 어떻게 나누어 저장하는가에 따른 차이일 뿐, 어느 방식이 더 우수하다고 단정할 수 없다. 
	물리적으로 데이터를 조작하거나 산술 연산을 수행할 때에는 리틀 엔디안 방식이 더 효율적이다. 
	데이터의 각 바이트를 배열처럼 취급할 때에는 빅 엔디안 방식이 더 적합하다. 

	인텔기반 윈도우 = 리틀엔디안 방식
	네트워크를 통해 데이터를 전송할 때 = 빅 엔디안 방식
	-> 인텔기반 시스템에서 소켓 통신을 할 때는 바이트 순서에 신경을 써서 데이터를 전달해야 한다. 