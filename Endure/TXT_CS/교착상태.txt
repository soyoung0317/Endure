Q. 경쟁상태(Race Condition)과 교착상태(Dead Lock)에 대해 설명하시오.

---------------------------------------------------

Q. 경쟁상태(Race Condition)과 교착상태(Dead Lock)에 대해 설명하시오.
A.	
	경쟁상태(Race Condition)
		1. 정의
			특정 공유 자원에 여러 프로세스나 스레드가 접근하려고 서로 경쟁하는 것을 'Race Condition(경쟁상태)'라고 합니다.
			이 공유자원이 존재하는 구간으로 경쟁상태가 일어날 수 있는 영역을 'Critical Section(임계영역)'이라고 합니다.

		2. 해결방법
			임계영역에 대한 경쟁상태를 제거하기 위해서 한 공유자원에 대해서 한 쓰레드에만 접근을 허락하도록 하는 
			'상호배제(Mutual Exclusion)'를 사용합니다.

	교착상태(Dead Lock)
		1. 정의
			둘 이상의 프로세스나 스레드가 서로가 가진 자원을 요청하며 무한히 기다리는 상태를 말합니다. 
			더 이상 진행(동작)이 불가능하고, 외부에서 개입하지 않으면 해소되지 않습니다.

		2. 발생조건
			: 하나라도 만족하지 않으면 교착상태가 발생하지 않음. 

			- 상호 배제 : 하나의 프로세스가 자원을 사용중일 때 다른 프로세스는 그를 사용할 수 없는 상태 
			- 점유와 대기 : 최소 하나의 자원을 점유하고 있으면서 다른 프로세스가 사용중인 자원을 추가로 점유하기 위해 대기하는 프로세스가 존재한다.
			- 비선점 : 다른 프로세스가 자원을 사용중인 경우 그 사용이 끝날 때 까지 강제로 뺏을 수 없다.
			- 순환 대기 : 프로세스의 집합에서 순환형태로 자원을 대기하고 있어야 한다.
		
		3. 예방
			교착상태의 발생 조건 중 하나를 제거하면서 예방.
			- 상호 배제 부정 : 여러 프로세스가 공유 자원 사용
			- 점유 대기 부정 : 프로세스 실행 전 모든 자원 할당
			- 비선점 부정 : 점유중인 자원을 다른 프로세스가 요구하는 경우 그를 반납
			- 순환 대기 부정 : 자원에 고유 번호를 할당한 후 순서대로 자원 요구
			
		4. 회피
			- 은행원 알고리즘
			: 프로세스가 자원을 요구할 때 시스템은 자원을 할당한 후에도 안정 상태로 남아있게 되는지 미리 검사하여 교착 상태를 회피한다.
			안정 상태인 경우만 자원을 할당하고 그렇지 않은 경우 다른 프로세스들의 자원 해지시 까지 대기한다.

		5. 회복
			- 교착상태를 일으킨 프로세스를 종료
				: 교착 상태의 프로세스 모두 중지
				: 교착 상태가 제거될 때까지 하나씩 프로세스 중지
			 
			- 할당된 자원을 회수해 회복하는 기법
				: 교착상태의 프로세스가 점유하고 있는 자원을 선점해 다른 프로세스에게 할당
				: 우선 순위가 낮거은 프로세스나 수행 횟수 적은 프로세스 위주로 프로세스 자원 선점
---------------------------------------------------