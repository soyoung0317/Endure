Q. 페이지 폴트에 대해 설명하시오.

Q. 페이지 폴트를 막는방법

Q. 페이지 교체 알고리즘에 대해 설명하시오. 

Q. 쓰레싱에 대해 설명하시오. 

-------------------------------------------------
Q. 페이지 폴트에 대해 설명하시오.
A. 1. 정의
	: 페이징(Paging) 기법을 통해 필요한 페이지만 물리 메모리에 로드하고, 나머지 페이지는 디스크(스왑 공간 또는 페이징 파일)에 저장됩니다.
		특정 가상 주소에 접근하려 할 때, 해당 페이지가 물리 메모리에 로드되어 있지 않다면 페이지 폴트(Page Fault)가 발생합니다.

	2. 원인
		1). 해당 페이지가 스왑 영역에 있음
			프로세스가 필요로 하는 모든 페이지가 항상 물리 메모리에 올라오는 것은 아닙니다.
			물리 메모리가 부족하거나, 아직 참조되지 않은 페이지는 디스크(스왑 영역)에 존재합니다. 
			CPU가 그 페이지를 처음 참조하려 할 때 “현재 물리 메모리에 없다”는 사실이 확인되면 페이지 폴트가 발생합니다.
		
		2). 잘못된 주소 접근
			잘못된 포인터로 접근하는 등, 프로세스가 접근 권한이 없는 주소 또는 존재하지 않는 주소에 접근하려 할 경우에도 페이지 폴트가 발생할 수 있습니다.
			이 경우에는 운영체제가 해당 접근을 “비정상적인 접근”으로 판별하고, 세그멘테이션 폴트(SEGFAULT) 등으로 처리할 수도 있습니다.
	
	3. 동작과정 
		1. 페이지 폴트 발생
			프로그램의 메모리 접근 요청: CPU가 프로그램의 가상 주소에 접근하려 할 때, 해당 페이지가 물리 메모리에 존재하지 않으면 페이지 폴트가 발생합니다.
			인터럽트 트리거: 페이지 폴트가 발생하면, CPU는 페이지 폴트를 처리하기 위해 인터럽트를 발생시킵니다.

		2. 페이지 폴트 핸들러(Page Fault Handler) 호출
			운영체제의 개입: 인터럽트가 발생하면, 운영체제(OS)는 페이지 폴트를 처리하기 위한 특별한 코드인 페이지 폴트 핸들러를 실행합니다.
			페이지 폴트 원인 분석: 페이지 폴트 핸들러는 페이지 폴트가 정상적인지, 아니면 잘못된 접근으로 인한 것인지를 판단합니다.

		3. 페이지 폴트 원인 확인
			정상적인 페이지 폴트: 필요한 페이지가 디스크에 존재하는 경우.
			잘못된 페이지 폴트: 프로그램이 접근 권한이 없는 메모리 영역에 접근하려는 경우.

		4. 정상적인 페이지 폴트 처리
			디스크에서 페이지 로드:
				스왑 공간 확인: 운영체제는 필요한 페이지가 디스크(스왑 공간 또는 페이징 파일)에 저장되어 있는지 확인합니다.
				페이지 로드: 디스크에서 해당 페이지를 읽어와 물리 메모리에 로드합니다.
			페이지 교체(Page Replacement):
				메모리 여유 공간 확인: 메인 메모리에 여유 공간이 없는 경우, 운영체제는 페이지 교체 알고리즘을 사용하여 어떤 페이지를 디스크로 내보낼지 결정합니다.
				페이지 교체 수행: 선택된 페이지를 디스크로 내보내고, 새로운 페이지를 메모리에 로드합니다.
			페이지 테이블 업데이트:
				매핑 정보 갱신: 페이지 테이블을 업데이트하여 가상 주소와 물리 주소 간의 매핑을 새로 설정합니다.
			명령어 재실행:
				프로그램 실행 계속: 페이지 폴트가 발생한 명령어를 다시 실행하여 정상적으로 메모리에 접근할 수 있게 합니다.

		5. 잘못된 페이지 폴트 처리
			오류 보고:
				프로그램 예외 처리: 프로그램이 접근 권한이 없는 메모리 영역에 접근하려는 경우, 운영체제는 해당 프로그램에 대한 예외를 발생시킵니다.
			프로그램 종료 또는 예외 처리:
				프로그램 종료: 심각한 오류인 경우, 운영체제는 해당 프로그램을 종료시킵니다.
				예외 처리: 프로그램이 예외 처리를 통해 오류를 처리할 수 있는 경우, 운영체제는 이를 지원합니다.

-------------------------------------------------

Q.	페이지 폴트를 줄이는 방법
A.	페이지 폴트가 발생하면, 운영체제는 디스크(또는 스왑 영역)에서 해당 페이지를 메모리로 로드해야 하므로, 실행 지연이 발생할 수 있습니다. 
	이를 막거나 최소화하는 방법은 다음과 같이 정리할 수 있습니다.

	1. 페이지 폴트를 막거나 줄이는 방법
		A. 작업 집합 (Working Set; 워킹셋) 관리
			- 워킹셋 : 프로세스가 실행되는 동안 자주 참조하거나 최근에 사용한 메모리 영역을 모아 놓은 집합
			- 설명: 프로세스의 '워킹셋'에 해당하는 페이지들을 메모리에 상주시켜, 필요할 때 바로 접근할 수 있도록 합니다.
		B. 코드 및 데이터 지역성 개선
			- 프로그램의 데이터 및 코드 구조를 최적화하여, 공간적 및 시간적 지역성을 높이는 방법입니다.
			- 설명: 관련된 데이터나 코드를 인접한 메모리 영역에 배치하면, 한 번의 페이지 로드로 여러 데이터에 접근할 수 있어 페이지 폴트 발생이 줄어듭니다.
		C. Huge Pages 사용
			- 페이지 크기를 늘려서 페이지 수를 줄이는 기법입니다.
			- 설명: 큰 페이지를 사용하면, 페이지 테이블 엔트리 수가 줄어들고, 메모리 접근 효율이 향상되어 페이지 폴트 가능성이 감소합니다.
-------------------------------------------------

Q. 페이지 교체 알고리즘에 대해 설명하시오. 
[ Feed Back ] : 5가지 종류를 말하는건 좋은데 정의만 던지고 장단점까지 굳이 설명안해도 된다. 이것도 너무 딥하다. 

A. 페이지 폴트(Page Fault) 발생 시 
	메인 메모리에 여유 공간이 없는 경우, 운영체제는 페이지 교체 알고리즘을 사용하여 다른 페이지를 디스크로 내보내고, 필요한 페이지를 로드합니다.
	대표적인 알고리즘은 FIFO, OPT, LRU, LFU 등이 있습니다. 

	1. FIFO (First-In, First-Out)
		물리 메모리에 가장 먼저 들어온 페이지를 가장 먼저 내보내는 방식입니다.
		즉, “가장 오래된 페이지”를 교체 대상으로 삼습니다.

		구현이 단순합니다. 큐(Queue)에 넣어 관리하기만 하면 됩니다.
		실제 사용량과 무관하게 가장 먼저 들어온 페이지부터 내보내므로, 자주 사용하는 페이지가 교체되어 성능이 떨어질 수 있습니다.

	2. OPT (Optimal, 최적 교체)
		앞으로 접근할 페이지의 정보를 미리 완벽하게 안다고 가정하고, 가장 나중에 사용될 페이지를 교체하는 방식입니다.
		이론적으로 가장 적은 페이지 폴트를 발생시키는 최적의 알고리즘입니다.
		실제 시스템에서 “앞으로 접근할 페이지”를 미리 알 수 없으므로, 구현이 불가능하거나 예측 알고리즘을 써야만 합니다(그럼에도 완벽하진 않음).

	3. LRU (Least Recently Used)
		“가장 오랫동안 사용되지 않은 페이지”를 교체 대상으로 삼습니다.
		과거 접근 패턴이 미래의 접근 패턴과 어느 정도 유사할 것이라는 지역성(Locality)을 가정하고 있습니다.

		실제 사용 이력을 기준으로 하여, 빈번히 사용되는 페이지가 교체될 확률을 낮춥니다.
		“사용 시점”을 추적해야 하므로, 구현 복잡도가 올라갑니다(하드웨어 지원이나 소프트웨어적 관리가 필요).

	4. LFU (Least Frequently Used)
		일정 기간(혹은 전체 기간) 동안 가장 적게 참조된 페이지를 교체합니다.
		접근 횟수(빈도)를 기준으로 판단합니다.

		자주 사용되는 페이지는 남겨두고, 거의 사용하지 않는 페이지를 우선 제거하기 때문에 논리적입니다.
		구현 시 참조 횟수를 업데이트하고, 우선순위를 갱신하는 비용이 발생합니다.

	5. Clock (Second Chance) 알고리즘
		사용 여부 비트(Reference Bit) 로 최근 참조 여부를 확인해 한 번 더 기회를 주는 방식
		물리메모리를 순회하면서 참조비트가 0인 페이지를 만나면 해당 페이지를 교체합니다. 

		FIFO에 비해 폴트율이 낮고 구현이 상대적으로 간단합니다. 
		
-------------------------------------------------

Q. 쓰레싱에 대해 설명하시오. 
A.  1. 정의
		페이지 부재(Page Fault) 가 과도하게 발생하여 디스크 스왑(Swap) 작업에 지나치게 많은 시간을 소모하고, 
		실제 사용자 프로그램의 실행은 거의 이루어지지 않는 상태를 말합니다.

	2. 해결방법 = 페이지 폴트를 줄이는 방법
		A. 워킹셋 관리
			: 프로세스가 자주 사용하는 페이지를 계속 메모리에 유지하면, 불필요한 페이지 교체가 줄어들어 쓰레싱 현상을 완화한다.
		B. 프로세스의 메모리 요구량 조절 (Multiprogramming Degree Control)
			: 너무 많은 프로세스가 동시에 실행되면 물리 메모리가 부족해져 각 프로세스가 필요한 페이지를 확보하지 못하게 되고, 
			그 결과 잦은 페이지 스왑이 발생합니다. 실행 중인 프로세스 수를 적절하게 제한하면 쓰레싱 현상을 줄일 수 있습니다.
		C. 페이지 교체 알고리즘 최적화
			: 효율적인 페이지 교체 알고리즘(LRU, Clock 알고리즘 등)을 사용하여, 불필요한 페이지 교체를 최소화합니다.

-------------------------------------------------
