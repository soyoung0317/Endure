Q. 경쟁상태(Race Condition)과 교착상태(Dead Lock)에 대해 설명하시오.

Q. 기아상태에 대해 설명하시오. 

Q. 라이브락, 슬립락, 이벤트 락, 스핀 락 에 대해 설명하시오. 

-------------------------------------------------

Q. 경쟁상태(Race Condition)과 교착상태(Dead Lock)에 대해 설명하시오.
A.	
	경쟁상태(Race Condition)
		1. 정의
			두 개 이상의 프로세스나 쓰레드가 공유 자원에 동시에 접근하여, 접근 순서에 따라 결과가 달라질 수 있는 상황
			이 공유자원이 존재하는 구간으로 경쟁상태가 일어날 수 있는 영역을 'Critical Section(임계영역)'이라고 합니다.

		2. 결과 
			결과	예측 불가능한 동작, 데이터 무결성 문제

		3. 해결방법
			임계영역에 대한 경쟁상태를 제거하기 위해서 한 공유자원에 대해서 한 쓰레드에만 접근을 허락하도록 하는 
			'상호배제(Mutual Exclusion)'를 사용합니다.
			주로 동기화 기법을 통해 해결 가능

	교착상태(Dead Lock)
		1. 정의
			둘 이상의 프로세스나 스레드가 서로가 가진 자원을 요청하며 무한히 기다리는 상태를 말합니다. 
			더 이상 진행(동작)이 불가능하고, 외부에서 개입하지 않으면 해소되지 않습니다.

		2. 발생조건
			: 하나라도 만족하지 않으면 교착상태가 발생하지 않음. 

			- 상호 배제 : 하나의 프로세스가 자원을 사용중일 때 다른 프로세스는 그를 사용할 수 없는 상태 
			- 점유와 대기 : 최소 하나의 자원을 점유하고 있으면서 다른 프로세스가 사용중인 자원을 추가로 점유하기 위해 대기하는 프로세스가 존재한다.
			- 비선점 : 다른 프로세스가 자원을 사용중인 경우 그 사용이 끝날 때 까지 강제로 뺏을 수 없다.
			- 순환 대기 : 프로세스의 집합에서 순환형태로 자원을 대기하고 있어야 한다.
		
		3. 예방
			교착상태의 발생 조건 중 하나를 제거하면서 예방.
			- 상호 배제 부정 : 여러 프로세스가 공유 자원 사용
			- 점유 대기 부정 : 프로세스 실행 전 모든 자원 할당
			- 비선점 부정 : 점유중인 자원을 다른 프로세스가 요구하는 경우 그를 반납
			- 순환 대기 부정 : 자원에 고유 번호를 할당한 후 순서대로 자원 요구
			
		4. 회피
			- 은행원 알고리즘
			: 프로세스가 자원을 요구할 때 시스템은 자원을 할당한 후에도 안정 상태로 남아있게 되는지 미리 검사하여 교착 상태를 회피한다.
			안정 상태인 경우만 자원을 할당하고 그렇지 않은 경우 다른 프로세스들의 자원 해지시 까지 대기한다.

		5. 회복
			- 교착상태를 일으킨 프로세스를 종료
				: 교착 상태의 프로세스 모두 중지
				: 교착 상태가 제거될 때까지 하나씩 프로세스 중지
			 
			- 할당된 자원을 회수해 회복하는 기법
				: 교착상태의 프로세스가 점유하고 있는 자원을 선점해 다른 프로세스에게 할당
				: 우선 순위가 낮거은 프로세스나 수행 횟수 적은 프로세스 위주로 프로세스 자원 선점

-------------------------------------------------

Q.	기아상태에 대해 설명하시오. 
A.	1. 정의
		기아 상태는 특정 프로세스나 쓰레드가 시스템 자원을 지속적으로 할당받지 못해 작업을 완료하지 못하고 무한히 대기하는 상태를 의미합니다
		자원 할당 과정에서 우선순위가 낮거나, 특정 조건에 의해 지속적으로 배제되기 때문에 발생합니다.

	2. 기아 상태의 영향
		응용 프로그램의 비정상 동작: 기아 상태에 있는 프로세스나 쓰레드는 예상치 못한 동작을 하거나 응답하지 않을 수 있습니다.
		시스템 자원의 비효율적 사용: 특정 프로세스가 계속해서 자원을 할당받지 못하면, 전체 시스템 자원의 효율적인 사용이 저해될 수 있습니다.
		사용자 경험 저하: 사용자 인터페이스를 제공하는 프로세스가 기아 상태에 빠지면, 사용자 경험이 크게 저하될 수 있습니다.

	3. 해결방법
	5. 기아 상태의 해결 방법
		a. 우선순위 역전 방지(Priority Inversion Prevention)
			우선순위 역전 문제를 해결하여, 낮은 우선순위의 프로세스가 높은 우선순위의 프로세스에 의해 배제되지 않도록 합니다.
			
		b. 공정한 스케줄링 알고리즘 사용
			모든 프로세스가 공평하게 자원을 할당받을 수 있도록 하는 스케줄링 알고리즘을 사용합니다. 
			대표적인 공정한 스케줄링 알고리즘으로는 라운드 로빈(Round Robin), 최대 대기 시간 우선(Highest Response Ratio Next, HRRN) 등이 있습니다.
			
		c. 우선순위 증대(Priority Aging)
			기아 상태에 빠진 프로세스의 우선순위를 점진적으로 증가시켜, 결국에는 CPU 자원을 할당받을 수 있도록 합니다. 
			이를 통해 낮은 우선순위를 가진 프로세스가 무한히 배제되는 것을 방지합니다.
			
		d. 자원 할당 정책 개선
			자원 할당 방식을 재설계하여, 모든 프로세스가 일정한 간격으로 자원을 할당받을 수 있도록 합니다.
			
		e. 선점 스케줄링 알고리즘 조정
			선점 스케줄링 알고리즘에서 선점 조건을 조정하여, 특정 프로세스가 지속적으로 선점당하지 않도록 합니다.
-------------------------------------------------

Q. 라이브락, 슬립락, 이벤트 락, 스핀 락 에 대해 설명하시오. 
A. 라이브락 : 
		프로세스나 쓰레드가 계속해서 실행 상태를 유지하며, 서로의 자원 접근을 방해합니다.
		두 개 이상의 쓰레드가 동시에 동일한 자원을 요청하며, 서로의 요청을 계속해서 무시하고 반복적으로 요청을 시도하는 경우.

	슬립락 : 
		쓰레드나 프로세스가 공유 자원에 접근하려고 할 때, 자원이 사용 가능하지 않으면 잠시 대기(슬립) 상태로 전환하여 자원을 기다림

	이벤트 락 : 
		특정 이벤트(Event)가 발생할 때까지 실행 단위를 대기 상태로 유지하고, 이벤트가 발생하면 실행 단위를 깨워서 자원에 접근하도록 하는 동기화 기법

	스핀락 : 
		스핀락은 뮤텍스와 유사하지만, 락을 획득할 때까지 실행 단위가 반복적으로 락을 시도하며 기다리는 방식의 락입니다. 주로 짧은 시간 동안만 자원을 점유할 경우 사용됩니다.
