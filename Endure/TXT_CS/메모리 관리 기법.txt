Q. 세그멘테이션(가변 분할 방식) 에 대해 설명하시오

Q. 페이징(고정 분할 방식)에 대해 설명하시오

Q. 버디 시스템에 대해 설명하시오 
-------------------------------------
Q.	세그멘테이션(가변 분할 방식) 에 대해 설명하시오
A.	1. 정의		
		메모리를 여러 개의 ‘세그먼트(Segment)’로 나누어 관리하는 메모리 관리 기법

	2. 특징
		1. 세그먼트(Segment)
			프로그램을 구성하는 논리적 단위(코드, 데이터, 스택, 힙 등)를 각각 별도의 세그먼트로 구분합니다.
		2. 논리 주소(Logical Address) 구조
			세그먼트 방식에서는 논리 주소가 (세그먼트 번호, 변위(offset))로 구성됩니다.
		3. 세그먼트 테이블(Segment Table)
			프로세스마다 자신이 사용하는 세그먼트에 대한 시작 주소(base)와 크기(limit), 접근 권한 등을 저장해둔 테이블을 가집니다.
			CPU가 세그먼트를 참조할 때, ‘세그먼트 번호’를 인덱스로 하여 세그먼트 테이블을 조회하고, 실제 물리 메모리의 시작 주소와 한계를 확인하게 됩니다.

	3. 장단점
		장점 
			1) 논리적 구조 반영 
				코드, 데이터, 스택 등을 별도 세그먼트로 구분하여 관리하므로, 프로그램 구조에 따라 유연하게 메모리를 할당할 수 있습니다.
			
			2) 부분적 공유와 보호 용이
				특정 세그먼트(예: 코드 세그먼트)는 읽기 전용으로 여러 프로세스가 공유할 수 있고
				각 독립적으로 할당해 사용하도록 설정 가능하므로, 보호와 공유가 용이합니다.
		단점 
			1) 외부 단편화(External Fragmentation) 문제
				세그먼트는 가변 크기이므로, 메모리에 세그먼트를 할당하고 해제하는 과정에서 물리 메모리 곳곳에 작은 빈 공간이 흩어질 수 있습니다.
			2) 관리 복잡도
				세그먼트 테이블을 유지해야 하고, 할당/해제 시 세그먼트 단위 관리가 필요해 복잡도가 올라갑니다.
	- 해결방법 
		1. 메모리 압축
			: 조각모음을 통해 공간을 정리해야한다
			단, 내부에서 진행중인 프로세스를 일시중지하고 메모리공간을 이동해야하기떄문에 오버헤드가 발생할 수 있다. 
			
		2. 가상메모리 기법 - 페이징
			: 
-------------------------------------

Q. 페이징(고정 분할 방식)에 대해 설명하시오
A.	1. 정의
		프로세스의 메모리 공간을 동일한 크기의 page 단위로 나누어 물리적 메모리의 서로 다른 위치에 page들을 저장하는 메모리 관리 기법

	2. 특징
		물리적 메모리를 page와 같은 크기의 frame으로 미리 나누어둔다.
		주소 바인딩(address binding)을 위해 모든 프로세스가 각각의 주소 변환을 위한 page table을 갖는다.

	3. 장단점
		장점 : 구현이 간단하고 오버헤드가 적다 (단순히 같은크기로 나누기떄문에 단순함)
		단점 : 작은 프로세스도 큰 영역에 할당되어 공간이 낭비되는 내부단편화가 발생한다. 
	
	[내부단편화]
	해결방법X, 분할크기를 통해 내부단편화를 최소화하는수밖에 없음
		
-------------------------------------
		
Q.	버디 시스템에 대해 설명하시오 
A.	시스템 메모리를 2의 거듭제곱 크기로 나누어 관리하고, 분할(할당)과 병합(해제)을 체계적으로 처리할 수 있도록 한것
	요청된 메모리 크기에 가장 가까운 2^n 블록을 찾아서 할당합니다.

	버디(Buddy) 쌍 개념
		- 분할 과정에서 2^k 크기 블록이 두 개의 2^(k-1) 크기 블록으로 나뉠 때, 이 두 블록을 ‘버디 쌍’이라고 부릅니다.
		- 할당되어 있지 않은 두 버디 블록은 해제 시점에 다시 합쳐져 더 큰 블록으로 병합될 수 있습니다.

	빠른 병합(해제) 과정
		메모리 해제 시, 블록이 할당 취소되면 해당 블록의 버디가 비어 있는지(할당 취소 상태인지)를 확인합니다.
		버디가 모두 비어 있다면 두 블록을 하나의 더 큰 블록으로 병합하고, 이를 반복적으로 수행해 상위 크기 블록들과도 계속 병합해 나갑니다.
		이러한 방식으로 조각난 메모리를 빠르게 복구하고 큰 블록을 유지할 수 있습니다.

	장점
		- 분할과 병합 과정이 단순화되어 구현하기 쉽고 빠르게 처리할 수 있습니다.
		- 연속적인 큰 블록이 필요한 경우, 조각 모음을 최소화하여 큰 블록을 다시 확보하기 용이합니다.

	단점
		- 2의 거듭제곱으로만 분할하므로, 실제 필요한 크기보다 더 많은 메모리가 할당될 수 있어 내부 단편화(Internal Fragmentation)가 발생하기 쉽습니다.
		- 요청 크기가 가변적이고 다양할수록 내부 단편화가 심해질 수 있습니다.