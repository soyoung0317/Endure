[질문 리스트]
Q. 메모리 계층구조에 대해 설명하시오 

Q. 메모리 구조에 대해 설명하시오

Q. 각 메모리별 속도 

-------------------------------------
Q.	메모리 계층구조에 대해 설명하시오 
A.	메모리 계층구조 정의 
	: 컴퓨터 시스템에서 데이터를 저장하고 액세스하는 메모리들이 성능, 크기, 비용에 따라 계층적으로 구성된 구조

	왜 사용하는가?
		1. 속도-비용 트레이드오프
			: 빠른 메모리는 비용이 비싸고 용량이 작고 느린 메모리는 비용이 저렴하고 용량이 큽니다\
		2. 효율적인 데이터 접근
			: 자주 사용하는 데이터를 빠른 메모리에 저장하여 성능을 극대화하고, 덜 사용하는 데이터를 느린 메모리에 저장합니다.

	구성요소
		레지스터 : 가장 빠름, 매우 작음     
		캐시 메모리 : 빠름, CPU와 메인 메모리 연결 
		주 메모리(RAM) : 중간 속도, 실행 데이터 저장 
		보조 저장장치 : 느림, 대용량 저장 가능    
		대규모 저장장치 : 매우 느림, 무한대 용량    
		
-------------------------------------

Q.	메모리 구조에 대해 설명하시오
A.	메모리 정의
	: 프로그램 실행 중 데이터를 저장하고 관리하는 공간

	메모리 구조의 구성
		1. 코드영역
			역할 : 프로그램의 실행 명령어(코드)가 저장되는 영역
			특징 : 읽기 전용
			저장 데이터 : 함수정의, 컴파일 명령어 등 
		2. 데이터 영역
			역할 : 프로그램이 시작될 때 생성되며, 전역 변수와 정적 변수를 저장.
			특징 : 프로그램이 종료될 때까지 메모리에 유지.
			저장 데이터 : 전역 변수와 정적 변수.
		3. 힙 영역
			역할 : 프로그램 실행 중 동적으로 할당되는 메모리를 저장.
			특징 : 개발자가 명시적으로 할당(new, malloc)과 해제(delete, free)를 관리.
				런타임에 크기가 결정된다. 
			저장 데이터 : 동적으로 할당
		4. 스택 영역
			역할 : 함수 호출 시 생성되는 지역 변수와 함수 호출 정보를 저장.
			특징 : 함수 호출 시 자동으로 메모리 할당, 함수 종료 시 자동으로 해제.
				크기가 제한적이며, 초과 시 스택 오버플로우(Stack Overflow) 발생.
				컴파일 타임에 크기가 결정된다. 
			저장 데이터 : 지역 변수, 함수의 호출 정보(스택프레임) 등
			
-------------------------------------

Q.	각 메모리별 속도 
A.	코드영역 > 스택영역 > 데이터 영역 > 힙영역
	
	코드 영역		가장 빠름		레지스터와 유사 (1~2 나노초)			CPU는 실행 중인 명령어를 직접 캐시나 레지스터에 적재하여 실행.
	스택 영역		빠름				RAM 접근 속도 (50~100 나노초)			스택은 함수 호출/지역 변수 처리에 최적화된 메모리 관리 구조를 가지며, CPU와 가까움.
	데이터 영역		중간 속도		RAM 접근 속도 (50~100 나노초)			전역 변수와 정적 변수가 저장되며, 크기가 고정되어 효율적이나 코드 영역보다 느림.
	힙 영역			느림				RAM보다 약간 느림 (100~200 나노초)	동적 메모리 할당 및 해제를 관리하는 비용이 추가되어 스택보다 느림.