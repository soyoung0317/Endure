Q. 인터럽트란 무엇인가?

Q. 시스템콜에 대해 설명하시오.

-------------------------------------------------

Q. 인터럽트란 무엇인가?
A.
	1. 정의
		인터럽트(Interrupt)란, CPU가 어떤 작업을 수행하고 있을 때, 예외적이거나 긴급한 상황이 발생하면 현재 작업을 잠시 멈추고, 
		즉시(또는 정해진 우선순위에 따라) 해당 상황을 처리하는 기능이다.

	2. 왜 사용하는가
		예를 들어, 하드웨어(키보드 입력, 마우스 클릭, 네트워크 데이터 수신 등)에서 신호가 오거나, 
		프로그램에서 예외상황(오류, 분기 등)이 발생할 때 즉각적으로 대응할 필요가 있기 때문이다.
		CPU가 계속 폴링(반복 체크)하지 않아도, 이벤트가 발생했을 때만 처리할 수 있어 효율적임.
		
	3. 특징
		(1) 장점
			빠른 반응성(이벤트 기반 처리 가능)
			시스템 자원 효율적 사용(불필요한 반복 제거)
			다양한 장치 및 예외 상황에 유연하게 대응
			
		(2) 단점
			인터럽트 처리 루틴이 복잡해질 수 있음
			동기화 문제, 예기치 못한 상황에서 버그 발생 가능성
		
	4. 사용 예시
		키보드 입력 시 인터럽트 발생 → CPU가 입력값 처리
		타이머 인터럽트 → 운영체제가 프로세스 스케줄링
		네트워크 카드에서 데이터 수신 인터럽트 → OS가 데이터 처리

	5. 종류
		인터럽트는 발생 원인과 처리 방법에 따라 여러 종류로 나눌 수 있는데, 
		하드웨어 인터럽트와 소프트웨어 인터럽트, 그리고 마스크 인터럽트/논마스크 인터럽트로 분류할 수 있습니다.
		
		1) 하드웨어 인터럽트
			정의: CPU 외부의 하드웨어 장치(예: 키보드, 마우스, 네트워크 카드, 타이머 등)에서 발생하는 인터럽트
			예시: 키보드를 누르면 입력값이 도착했다는 신호를 CPU에 보내는 것, 네트워크 카드가 데이터 수신을 알리는 것
			특징: 외부 이벤트에 즉시 반응해야 하므로 시스템 반응성이 높아짐
			
		2) 소프트웨어 인터럽트
			정의: 프로그램(소프트웨어)에서 명령어를 통해 의도적으로 발생시키는 인터럽트
			예시: 시스템 콜(운영체제 서비스 요청), 예외 상황 처리(0으로 나누기 등)
			특징: 주로 소프트웨어적인 처리 요구사항이 있을 때 사용
			
		3-1) 마스커블 인터럽트:
			CPU가 인터럽트 마스크(bit)를 통해 일시적으로 무시(차단)할 수 있는 인터럽트
			예시: 일반적인 하드웨어 장치의 인터럽트
			특징: 중요도에 따라 필요 시 무시 가능(현재 중요한 코드 실행 중일 때)
			
		3-2) 논마스커블 인터럽트(NMI, Non-Maskable Interrupt):
			시스템에서 반드시 즉시 처리해야 하는, 마스크 불가능한 인터럽트
			예시: 하드웨어 고장, 메모리 오류, 시스템 중대한 에러
			특징: 시스템 안정성, 안전 확보가 목적이라 절대 무시될 수 없음

	6. 처리과정
		명령어 실행단계를 마칠 때 마다 중앙처리장치는 반복적으로 인터럽트 요청이 있는지 확인한다. 

		(1) 인터럽트 발생
			하드웨어/소프트웨어적으로 인터럽트 신호 발생
			-> 인터럽트 가능 플래그 AND연산 인터럽트 요청 신호 -> 제어장치로 입력
			
		(2) 현재 작업(명령어) 중단 & 컨텍스트 저장
			CPU는 현재 실행 중인 명령어를 멈추고, 프로그램 카운터(PC), 레지스터 등 현재 상태를 스택에 저장함
			
		(3) 인터럽트 벡터(Interrupt Vector) 참조
			인터럽트마다 지정된 고유 번호(인터럽트 벡터)가 존재
			CPU는 해당 인터럽트 벡터 테이블(Interrupt Vector Table, IVT)을 참조해서, 어느 메모리 주소로 점프할지 결정
			= 인터럽트 벡터를 참조하여, 발생한 인터럽트에 해당하는 ISR의 시작주소를 확인한다. 
			
		(4) 인터럽트 핸들러(Interrupt Handler) / 인터럽트 서비스 루틴(ISR, Interrupt Service Routine) 실행
			해당 인터럽트 번호에 할당된 ISR(핸들러) 함수 실행
			필요한 이벤트 처리(예: 데이터 읽기, 상태 갱신 등)
			
		(5) 복귀/원래 작업 재개
			ISR이 끝나면 저장했던 컨텍스트를 복원하고, 중단됐던 명령어를 계속 실행


-------------------------------------------------

Q. 시스템콜에 대해 설명하시오.
A.
	1. 정의
		응용 프로그램(유저 모드)이 운영체제(커널 모드)의 기능을 이용할 수 있도록 제공하는 인터페이스(함수 호출)
		쉽게 말해, 프로그램이 직접 하드웨어 자원(파일, 네트워크, 프로세스 등)에 접근하지 못하니까, 운영체제의 도움을 요청하는 공식적인 방법이다.

	2. 왜 사용하는가
		(1) 보안 및 안정성 확보 
			: 직접 하드웨어나 메모리에 접근하지 않고, 커널을 통해 간접적으로 제어함으로써 시스템의 안정성과 보안을 유지할 수 있다.
			: 잘못된 접근으로 인한 시스템 충돌이나 보안 취약점을 방지한다.
		(2) 추상화 제공 
			: 다양한 하드웨어와 시스템 자원을 일관된 인터페이스로 추상화하여, 복잡한 하드웨어 세부 사항을 신경쓰지 않고 고수준의 기능을 사용할 수 있습니다.
		(3) 자원 관리의 중앙 집중화 
			: 커널은 모든 시스템 자원을 관리하므로, 시스템콜을 통해 요청된 작업이 일관되고 효율적으로 처리될 수 있습니다. 
			: 이를 통해 프로세스, 메모리, 파일, 네트워크 등 각종 자원에 대한 접근과 관리를 통합할 수 있습니다.
	
	3. 동작 과정
		(1) 사용자 프로그램이 시스템 콜 라이브러리 함수를 호출함 (예: read(), write(), open(), fork() 등)
		(2) 실제 시스템 콜 요청 시, CPU의 특권 명령(소프트웨어 인터럽트, 예: int 0x80, syscall 등)을 통해 커널 모드로 전환됨
		(3) 운영체제 커널이 해당 요청을 처리(예: 파일 읽기, 데이터 전송 등)
		(4) 처리가 끝나면 결과 값을 사용자 프로그램으로 반환하고, 다시 유저 모드로 복귀함

	4. 특징
		장점
			- 보안성: 사용자 애플리케이션이 커널의 보호된 기능을 안전하게 사용할 수 있도록 하여, 직접 하드웨어에 접근함으로 인한 문제를 방지합니다.
			- 추상화: 복잡한 하드웨어 및 OS 내부 구현을 감추고, 단순한 인터페이스로 다양한 기능을 제공함으로써 개발 효율성을 높입니다.
			- 자원 관리: 중앙 집중식 자원 관리를 통해 시스템 전체의 효율성과 안정성을 유지할 수 있습니다.
		단점
			- 모드 전환 오버헤드: 사용자 모드와 커널 모드 사이의 전환(컨텍스트 스위칭) 시 발생하는 오버헤드로 인해, 시스템콜 호출이 빈번하면 성능 저하가 발생할 수 있습니다.
			- 디버깅 어려움: 커널 모드에서 발생하는 오류는 일반 애플리케이션보다 디버깅이 어려워, 문제 해결에 더 많은 노력이 필요할 수 있습니다.


-------------------------------------------------
