Q. 캐시 메모리를 왜 사용하는가 ? 

Q. 캐시 일관성 문제란 ?

Q. CPU의 적중률을 높이기 위해 어떤 원리를 사용하는가 ? 

Q. 캐시 지역성이란 ? 

Q. 캐시라인에 대해 설명하시오. 

Q. 캐시 미스가 일어났을때 동작방식에 대해 설명하시오. 

-------------------------------------------------
 [참고사항]
 적중(Cache Hit): CPU가 필요한 데이터가 캐시 메모리에 이미 있는 경우.
 적중률(Cache Hit Rate): 전체 데이터 참조 중에서 캐시에 있는 데이터를 사용하는 비율을 뜻합니다. 
							적중률이 높을수록 캐시 메모리가 효과적으로 작동합니다.
							
-------------------------------------------------
Q. 캐시 메모리를 왜 사용하는가 ? 
A. 1. 정의
	: 캐시 메모리는 CPU와 메인 메모리(RAM) 사이에 위치한 고속 메모리로, 
	자주 사용되거나 앞으로 사용할 가능성이 높은 데이터를 저장하여 CPU의 처리 속도를 높이는 데 사용됩니다.

	2. 목적 
	- CPU와 메모리 간 속도 차이를 줄이기 위해
		: CPU의 속도는 매우 빠르지만 메인 메모리의 속도는 상대적으로 느리기 때문에, 
		데이터 접근 시간이 느려집니다. 이를 메모리 병목 현상이라 부릅니다. 캐시 메모리를 사용하면 이러한 속도 차이를 완화할 수 있습니다.
		
-------------------------------------------------

Q. 캐시 일관성 문제란 ?
A.  1. 정의
	캐시와 메인 메모리의 데이터가 동일한 내용을 유지해야 프로그램이 올바르게 동작할 수 있습니다.
	이 데이터의 일치 상태를 캐시 일관성(Cache Coherency)이라고 합니다.

	캐시 일관성 문제가 발생하는 경우는 두가지로 나눌 수 있는데, 
		1) 캐시와 메인 메모리의 데이터가 다를 때
			CPU가 캐시에 있는 데이터를 수정했지만, 이 수정 사항이 메인 메모리에 반영되지 않은 상태를 말합니다.
		2) 멀티프로세서(또는 멀티코어) 간 캐시 데이터가 다를 때
			여러 CPU가 각각 자신의 캐시에 데이터를 저장한 후 작업을 수행할 때, 동일한 데이터가 서로 다른 값으로 존재하는 상황입니다.

	2. 해결방안
	소프트웨어적 해결방식과 하드웨어적 해결방식으로 나뉜다.
	소프트웨어적으로는 컴파일 시(Compile time) 문제를 검출하며
	하드웨어적으로는 실행 시(Run time) 문제를 검출한다.

		0. 쓰기 정책 적용
			캐시에서 데이터를 수정할 때 메모리와의 동기화를 보장하는 정책
			Write-Through
			데이터를 캐시에 쓰는 동시에 메인 메모리에도 즉시 반영.
			Write-Back
			데이터를 캐시에만 저장하고, 메모리는 나중에 필요할 때만 업데이트.

		1. 소프트웨어적 해결
			공유 캐시 사용 / 공유변수 캐시 미사용 

		2. 하드웨어적 해결
			1. 버스 기반 캐시 일관성 프로토콜(Bus-Based Cache Consistency Protocol)
				동작 방식: 모든 캐시 동작이 공용 버스를 통해 이루어지며, 버스 상의 트래픽을 모니터링하여 일관성을 유지합니다.
				모든 캐시가 공유 버스를 통해 메모리 접근을 감시(스누핑)하여, 
				다른 캐시가 데이터를 수정하거나 삭제했을 때 이를 감지하고 데이터 상태를 업데이트하는 방식입니다.
			
			2. 디렉토리 기반 캐시 일관성 프로토콜(Directory-Based Cache Consistency Protocol)
			동작 방식: 메인 메모리에 각 메모리 블록의 상태를 추적하는 디렉토리를 유지합니다. 디렉토리는 어떤 프로세서가 특정 메모리 블록을 캐시하고 있는지 정보를 저장합니다.
			주기억장치의 중앙 제어기가 캐시 일관성을 관리하는 형태이다. 
			
-------------------------------------------------

Q. CPU의 적중률을 높이기 위해 어떤 원리를 사용하는가 ? 
A. 참조 지역성의 원리를 이용합니다. 

-------------------------------------------------

Q. 캐시 지역성이란 ? 
A. 1. 정의
	 데이터를 참조할 때, 데이터 접근 패턴이 캐시 메모리의 효율을 높이는 특성

	2. 종류
		1) 시간 지역성 (Temporal Locality)
		: 한 번 참조된 데이터(메모리 주소)는 가까운 미래에 다시 참조될 가능성이 높다는 특성.
		EX. 반복문

		2) 공간 지역성 (Spatial Locality)
		: 특정 데이터가 참조되었을 때, 그 데이터와 근접한 데이터도 곧 참조될 가능성이 높다는 특성.
		EX. 배열(배열의 원소를 순차적으로 접근하는 경우.)
		
-------------------------------------------------

Q. 캐시라인에 대해 설명하시오 . 
A. 1. 정의
		CPU 캐시에서 데이터를 저장하는 기본 단위
		CPU 캐시는 데이터를 빠르게 접근하기 위해 메모리에서 자주 사용하는 데이터를 미리 저장하는 임시 저장소인데, 
		이 저장소는 캐시 라인 단위로 데이터를 관리합니다. 
		캐시라인의 크기는 32, 64, 128바이트(CPU에 따라 다름)로 구성되며 해당 사이즈 경계로 정렬되어 있습니다.

	2. 동작방식
		1) 메모리에서 캐시로 데이터 로드 
			메모리에서 데이터를 읽을 때, 메모리의 특정 주소를 직접 읽는 대신, 캐시 라인 단위(64비트 등)로 데이터를 읽어옵니다.
		2) 데이터의 위치
			메모리 주소와 캐시 라인은 하나의 연속적인 영역을 형성합니다. 
		
-------------------------------------------------

Q. 캐시 미스가 일어났을때 동작방식에 대해 설명하시오. 
A. 1. 정의
	CPU가 필요한 데이터를 캐시에서 찾지 못하는 경우를 말합니다. 

	2. 종류
		1) 강제 미스 / 북 마이스트 미스 (Compulsory Miss ; cold miss)
			첫 번째 접근 시 캐시에는 해당 데이터가 없으므로 반드시 발생하는 미스입니다.
			예를 들어, 프로그램 실행 초기 또는 새로운 데이터가 처음 캐시될 때 발생합니다.
		2) 용량 미스 / 캐시 교체 미스 (Capacity Miss)
			캐시가 가득 차서 더 이상 데이터를 저장할 수 없는 경우 발생합니다.
			새로운 데이터를 캐시에 저장하려면 기존의 데이터 중 일부를 제거해야 하는데, 이때 캐시에서 제거된 데이터를 다시 요청하면 캐시 미스가 발생합니다.
		3) 충돌 미스 / 컨플릭트 미스 (Conflict Miss)
			캐시가 충분히 크지만, 캐시의 구조나 배치 방식(mapping) 때문에 같은 위치에 여러 데이터가 맵핑되어 충돌이 발생하는 경우입니다.
			예를 들어, 해시 테이블처럼 캐시가 정해진 범위의 메모리 주소에만 데이터를 저장하려 할 때, 여러 데이터가 동일한 캐시 슬롯에 저장되면 충돌이 발생합니다.

	2. 동작방식
		1) 캐시 미스 발생
			CPU는 먼저 캐시를 확인하지만, 만약 요청된 데이터가 캐시 안에 없다면 캐시 미스가 발생합니다.
		2) 메인메모리에서 데이터를 읽어들인다.
			캐시 미스가 발생하면, CPU는 메인 메모리에서 해당 데이터를 읽어옵니다. 메모리 접근은 캐시 접근보다 훨씬 시간이 오래 걸립니다.
		3) 읽어들인 데이터는 캐시 라인에 로드된다.
			메모리에서 읽어들인 데이터를 캐시 라인 단위로 로드합니다. 캐시 라인은 일반적으로 64바이트 크기이며, 
			데이터는 이 크기 단위로 캐시에 저장됩니다.
		4) 해당 캐시 라인을 캐시에 적재한다.
			캐시의 빈 공간에 저장합니다. 만약 캐시가 꽉 차 있다면, 캐시 교체 정책에 따라 기존 데이터를 제거하고 새로운 데이터를 저장하게 됩니다.

-------------------------------------------------