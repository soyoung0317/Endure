Q. 가상메모리에 대해 설명하시오

Q. 페이지 폴트

Q. 교체 알고리즘

 ------------------------------------
 Q. 가상메모리에 대해 설명하시오
 A. 1. 정의
		: 운영체제(OS)가 물리 메모리(RAM)의 용량보다 큰 메모리를 사용할 수 있도록 해 주는 기술
		: 프로그램이 사용하는 주소 공간(가상 주소)을 실제 물리 메모리 주소와 분리하여 관리함으로써, 
		 효율적인 메모리 활용과 프로세스 간 메모리 보호를 가능하게 만든다.

	2. 사용하는 이유 
		- 메모리 용량 확장
		: 모든 프로그램을 실행하기에 실제 물리 메모리가 부족할 때, 
		가상 메모리를 사용해 일부 데이터를 디스크(하드디스크, SSD 등)에 임시로 보관한다. 
		이렇게 하면 프로그램은 실제 물리 메모리 크기보다 큰 주소 공간을 사용하는 것처럼 동작할 수 있습니다.
		
		- 메모리 보호와 독립성
		: 가상 메모리를 사용하면, 각 프로세스는 독립된 가상 주소 공간을 가집니다. 
		한 프로세스가 다른 프로세스의 메모리에 잘못 접근하는 문제가 줄어들고, 시스템 전반의 안정성이 높아집니다.
		
		- 프로그램 로딩 및 스와핑
		: 필요한 부분만 물리 메모리에 로드하고, 사용하지 않는 부분은 디스크로 내보내는(스왑) 방식으로 메모리를 효율적으로 쓸 수 있게 해 줍니다.

	3. 동작 원리
		가상 주소와 물리 주소
			가상 주소(Virtual Address): 프로세스가 인식하는 주소 공간
			물리 주소(Physical Address): 실제 RAM 상의 주소
			CPU가 가상 주소로 메모리에 접근할 때, **MMU(Memory Management Unit)**라는 하드웨어가 이를 적절한 물리 주소로 변환합니다(주소 변환).
		
		페이지와 페이지 테이블
			가상 메모리 시스템에서 일반적으로 페이지(Page) 단위로 메모리를 관리합니다.
			운영체제는 각 프로세스에 대해 **페이지 테이블(Page Table)**을 유지하며, 
			각 가상 페이지가 어떤 물리 페이지와 연결되어 있는지 정보를 기록합니다.
	
		페이지 폴트(Page Fault)	
			페이지가 물리 메모리에 없는 상태에서 프로세스가 해당 페이지에 접근하면 발생하는 예외 상황입니다.
			이 때 운영체제는 디스크에서 해당 페이지를 읽어 물리 메모리로 가져와서(로드) 다시 실행을 진행합니다.
			물리 메모리가 가득 차 있다면, 사용되지 않는 페이지를 디스크로 내보내(스왑 아웃) 새로 필요한 페이지를 넣습니다(스왑 인).

	4. 장점
		- 메모리 효율적 사용: 필요할 때만 물리 메모리를 할당하고, 사용하지 않는 메모리는 디스크에 두어 전체적으로 메모리를 더 잘 활용할 수 있습니다.
		- 프로그램 크기 제한 완화: 물리 메모리가 작아도, 큰 프로그램을 부분적으로 로드하며 실행할 수 있습니다.
		- 메모리 보호: 프로세스마다 독립적인 주소 공간을 가지므로, 잘못된 포인터 연산이나 오류가 다른 프로세스의 메모리를 침범하는 일을 막을 수 있습니다.

	5. 단점
		- 속도 저하: 디스크 I/O는 RAM보다 훨씬 느리므로, 스왑(디스크로부터/로의 페이지 이동)이 자주 발생하면 시스템 성능이 크게 떨어질 수 있습니다.
		- 추가적인 하드웨어 및 소프트웨어 복잡도: 주소 변환을 위한 MMU, 페이지 테이블 관리, 페이지 폴트 처리 등을 구현해야 하므로 시스템이 복잡해집니다.
		- 디스크 공간 사용: 실제 물리 메모리가 부족할 경우 스왑 공간이 필요하고, 이로 인해 디스크 사용량이 늘어날 수 있습니다.