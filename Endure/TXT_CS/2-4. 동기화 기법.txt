Q.	동기화 기법에 대해 설명하시오. 

Q. 세마포어와 뮤텍스의 차이점에 대해 설명하시오 
-------------------------------------------------

Q.	동기화 기법에 대해 설명하시오. 
A.	1. 정의
	공유 자원에 대한 동시 접근을 제어하여 경쟁 상태와 같은 동시성 문제를 방지하고, 데이터 일관성을 유지하는 데 사용되는 방법

	2. 필요성
		경쟁 상태(Race Condition): 여러 실행 단위가 동시에 자원에 접근하여 예기치 않은 결과를 초래.
		데이터 무결성(Data Integrity) 손상: 잘못된 데이터 업데이트로 인한 일관성 문제.
		교착 상태(Deadlock): 상호 배제를 통해 자원을 기다리는 동안 시스템이 멈추는 상황.

	3. 주요 동기화 기법
		a. 뮤텍스
			 한 번에 하나의 프로세스 혹은 쓰레드만이 자원에 접근할 수 있도록 하는  락(Lock) 메커니즘 기법.

			 [동작원리] - 획득과 해제 
				락 획득(Acquire Lock): 실행 단위가 뮤텍스를 획득하려고 시도합니다. 
					뮤텍스가 해제 상태이면, 실행 단위는 뮤텍스를 획득하고 자원에 접근할 수 있습니다. 
					뮤텍스가 획득된 상태이면, 실행 단위는 대기 상태로 들어갑니다.
				락 해제(Release Lock):  실행 단위가 작업을 마치면 뮤텍스를 해제하여 다른 실행 단위가 뮤텍스를 획득할 수 있도록 합니다.

			[장점] 간단하고 효과적인 상호 배제(동시 사용을 피하기 위해 사용되는 알고리즘) 제공.
			[단점] 잘못된 사용 시 교착 상태(Deadlock) 발생 가능.

		b. 세마포어
			b-1. 카운팅 세마포어
				유한한 개수를 가진 자원을 접근 제어하는데 사용
				세마포어 값이 0이 되면 모든 자원이 사용 중임을 나타낸다.
			b-2. 이진 세마포어
				0 또는 1의 값을 가질 수 있어 뮤텍스와 유사하다. 

			[동작 원리]
				P 연산(Wait): 세마포어 값을 감소시킵니다. 세마포어 값이 0보다 크면 감소 후 자원 접근 허용. 세마포어 값이 0이면 실행 단위를 대기 상태로 만듦.
				V 연산(Signal): 세마포어 값을 증가시킵니다. 대기 중인 실행 단위가 있으면 깨워서 자원 접근 허용.
			
			[장점]
				다수의 자원 접근 제어 가능: 여러 개의 동일한 자원을 동시에 접근할 수 있도록 제어할 수 있습니다.
				유연성 높음: 상호 배제뿐만 아니라 자원 개수 제한에도 사용할 수 있습니다.

			[단점]
				관리 복잡성: 세마포어의 정확한 값 관리는 까다로울 수 있으며, 잘못 관리하면 교착 상태(Deadlock)가 발생할 수 있습니다.

-------------------------------------------------

Q.	세마포어와 뮤텍스의 차이점에 대해 설명하시오 
A.	뮤텍스(Mutex) : 공유된 자원의 데이터 혹은 임계영역(Critical Section) 등에 하나의 Process 혹은 Thread가 접근하는 것을 막아줌(즉, 동기화 대상이 하나)
	세마포어(Semaphore) : 공유된 자원의 데이터 혹은 임계영역(Critical Section) 등에 여러 Process 혹은 Thread가 접근하는 것을 막아줌(즉, 동기화 대상이 하나 이상)