Q. 세그멘테이션(가변 분할 방식) 에 대해 설명하시오

Q. 페이징(고정 분할 방식)에 대해 설명하시오

Q. 버디 시스템에 대해 설명하시오 
-------------------------------------
Q. 세그멘테이션(가변 분할 방식) 에 대해 설명하시오
A.	프로세스를 메모리에 연속적으로 쭉 올리는것

	[외부단편화]
	프로세스가 작업을 마치고 메모리에서 내려갔을때, 메모리 내에 빈공간이 생긴다. 
	빈공간(40MB) - 프로세스B - 빈공간(10MB) - 프로세스D
	의경우 내부에 50MB의 빈공간이 있어 50MB의 프로세스가 할당할 수 있을거같지만 연속된 메모리가 아니라서 할당이 불가능하다. 
	- 해결방법 : 조각모음을 통해 공간을 정리해야한다
			단, 내부에서 진행중인 프로세스를 일시중지하고 메모리공간을 이동해야하기떄문에 오버헤드가 발생할 수 있다. 
	
-------------------------------------

Q. 페이징(고정 분할 방식)에 대해 설명하시오
A.	메모리를 같은 크기로 분할, 
	
	장점 : 구현이 간단하고 오버헤드가 적다 (단순히 같은크기로 나누기떄문에 단순함)
	단점 : 작은 프로세스도 큰 영역에 할당되어 공간이 낭비되는 내부단편화가 발생한다. 
	
	[내부단편화]
	해결방법X, 분할크기를 통해 내부단편화를 최소화하는수밖에 없음
		
-------------------------------------
		
Q.	버디 시스템에 대해 설명하시오 
A.	시스템 메모리를 2의 거듭제곱 크기로 나누어 관리하고, 분할(할당)과 병합(해제)을 체계적으로 처리할 수 있도록 한것
	요청된 메모리 크기에 가장 가까운 2^n 블록을 찾아서 할당합니다.

	버디(Buddy) 쌍 개념
		- 분할 과정에서 2^k 크기 블록이 두 개의 2^(k-1) 크기 블록으로 나뉠 때, 이 두 블록을 ‘버디 쌍’이라고 부릅니다.
		- 할당되어 있지 않은 두 버디 블록은 해제 시점에 다시 합쳐져 더 큰 블록으로 병합될 수 있습니다.

	빠른 병합(해제) 과정
		메모리 해제 시, 블록이 할당 취소되면 해당 블록의 버디가 비어 있는지(할당 취소 상태인지)를 확인합니다.
		버디가 모두 비어 있다면 두 블록을 하나의 더 큰 블록으로 병합하고, 이를 반복적으로 수행해 상위 크기 블록들과도 계속 병합해 나갑니다.
		이러한 방식으로 조각난 메모리를 빠르게 복구하고 큰 블록을 유지할 수 있습니다.

	장점
		- 분할과 병합 과정이 단순화되어 구현하기 쉽고 빠르게 처리할 수 있습니다.
		- 연속적인 큰 블록이 필요한 경우, 조각 모음을 최소화하여 큰 블록을 다시 확보하기 용이합니다.

	단점
		- 2의 거듭제곱으로만 분할하므로, 실제 필요한 크기보다 더 많은 메모리가 할당될 수 있어 내부 단편화(Internal Fragmentation)가 발생하기 쉽습니다.
		- 요청 크기가 가변적이고 다양할수록 내부 단편화가 심해질 수 있습니다.