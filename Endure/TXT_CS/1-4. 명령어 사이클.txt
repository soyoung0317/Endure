Q.	명령어 사이클에 대해 설명하시오.

Q. 인터럽트에 대해 설명하시오. 

-------------------------------------------------

Q.	명령어 사이클에 대해 설명하시오.
A.	명령어 사이클은 CPU가 프로그램의 명령어를 처리하는 기본적인 과정입니다. 
	일반적으로 다섯 가지 단계로 구성됩니다.
	
	가져오기(Fetch)
	해석(Decode)
	실행(Execute)
	메모리 접근(Memory Access)
	쓰기 백(Write Back)

	1. 가져오기 (Fetch)
		목적: 프로그램 카운터에 저장된 주소를 사용하여 메모리에서 다음 실행할 명령어를 가져옵니다.
		과정:
			프로그램 카운터(PC): 현재 실행할 명령어의 메모리 주소를 가리킵니다.
			명령어 레지스터(IR): 메모리에서 가져온 명령어를 임시로 저장합니다.
		★과정:
			PC가 가리키는 메모리 주소에서 명령어를 읽어옵니다.
			읽어온 명령어를 IR에 저장합니다.
			PC를 다음 명령어의 주소로 업데이트합니다 (보통 PC += 명령어 크기).
	2. 해석 (Decode)
		목적: IR에 저장된 명령어를 해석하여 어떤 작업을 수행할지 결정합니다.
		과정:
			제어 유닛(Control Unit): 명령어의 연산 코드(Op-Code)를 해석하여 필요한 제어 신호를 생성합니다.
		명령어 해석:
			명령어의 종류(예: 산술 연산, 논리 연산, 데이터 이동 등)를 파악합니다.
			필요한 레지스터나 메모리 주소를 식별합니다.
	3. 실행 (Execute)
		목적: 해석된 명령어에 따라 실제 연산을 수행합니다.
		과정:
			산술 논리 유닛(ALU): 산술 연산(덧셈, 뺄셈 등)이나 논리 연산(AND, OR 등)을 수행합니다.
		실행 결과:
			연산 결과는 레지스터에 저장되거나, 후속 단계에서 메모리에 기록될 수 있습니다.
	4. 메모리 접근 (Memory Access)
		목적: 필요에 따라 메모리에서 데이터를 읽거나, 메모리에 데이터를 씁니다.
		과정:
			로드(Load): 메모리에서 데이터를 읽어와 레지스터에 저장합니다.
			스토어(Store): 레지스터의 데이터를 메모리에 씁니다.
			메모리 주소 계산: 필요한 경우 ALU를 사용하여 메모리 주소를 계산합니다.
	5. 쓰기 백 (Write Back)
		목적: 연산 결과를 최종 목적지(레지스터나 메모리)에 저장합니다.
		과정:
			레지스터 업데이트: ALU 연산 결과를 특정 레지스터에 저장합니다.
			메모리 업데이트: 필요한 경우, 메모리에 데이터를 씁니다.

	# 참고 - 명령이 순환하는 동안 CPU에 사용되는 회로
	PC : 다음에 실행할 명령어에 대한 메모리 주소를 추적
	MAR : 다음에 실행할 명령어의 메모리에 있는 주소를 보관
	MBR : 메모리로부터 페치(fetch)되어 cpu가 처리할 준비가 된 데이터나 메모리에 저장되어 대기 중인 데이터를 보관하는 양방향 레지스터
	IR : 메모리로부터 fetch 되는 (현재 실행할) 명령어를 일시적으로 보관하는 영역
	CU : 명령어 인출, 해독, 실행을 위한 제어신호를 타이밍에 맞춰 발생시킨다.
	ALU : 산술 및 논리 연산을 수행

	
-------------------------------------------------

Q.	인터럽트에 대해 설명하시오. 
A.	인터럽트는 CPU가 현재 실행 중인 작업을 일시 중단하고, 더 긴급하거나 중요한 작업을 처리하기 위해 
	다른 작업으로 전환하는 신호 또는 이벤트를 의미합니다
	인터럽트는 발생 원인에 따라 하드웨어 인터럽트와 소프트웨어 인터럽트로 나뉩니다.

	1. 인터럽트 종류
		a. 하드웨어 인터럽트 (Hardware Interrupt)
			정의: 외부 하드웨어 장치(예: 키보드, 마우스, 네트워크 카드, 디스크 드라이브 등)에서 발생하는 인터럽트입니다.
			특징:
				비동기적(Asynchronous): CPU의 현재 작업과 상관없이 발생할 수 있습니다.
			예시:
				키보드 입력: 사용자가 키를 누르면 키보드 컨트롤러가 인터럽트를 발생시켜 CPU에게 입력을 처리하도록 알립니다.
				타이머: 일정 시간이 경과하면 타이머가 인터럽트를 발생시켜 운영체제가 스케줄링을 조정합니다.
		b. 소프트웨어 인터럽트 (Software Interrupt)
			정의: 소프트웨어(프로그램)에서 의도적으로 발생시키는 인터럽트로, 주로 시스템 호출(System Call)이나 예외(Exception) 처리를 위해 사용됩니다.
			특징:
				동기적(Synchronous): 프로그램의 명령어 실행 과정에서 발생합니다.
			예시:
				시스템 호출: 애플리케이션이 운영체제의 서비스를 요청할 때 발생합니다.
				예외 처리: 0으로 나누기, 페이지 폴트(Page Fault) 등과 같은 오류 상황에서 발생합니다.

	2. 인터럽트 작동 방식
		a. 인터럽트 발생
			외부 장치나 소프트웨어가 인터럽트 신호를 보냅니다.
		b. 인터럽트 신호 인식
			CPU는 현재 실행 중인 명령어를 완료하거나 중단 지점에서 인터럽트를 인식합니다.
			일부 아키텍처에서는 특정 시점에서만 인터럽트를 인식할 수 있도록 합니다(예: 명령어 경계).
		c. 컨텍스트 스위칭(Context Switching)
			CPU는 현재 작업의 PC(Program Counter)와 SR(Status Register)를 스택에 저장합니다.
			인터럽트 핸들러의 주소로 프로그램 카운터를 변경합니다.
		d. 인터럽트 핸들러 실행
			인터럽트의 원인에 따라 적절한 핸들러가 실행됩니다.
			예를 들어, 키보드 인터럽트라면 키 입력 데이터를 처리하는 루틴이 실행됩니다.
		e. 원래 작업 복귀
			인터럽트 핸들러 실행이 완료되면, 저장된 상태를 복원하여 중단된 작업을 계속 실행합니다.

-------------------------------------------------