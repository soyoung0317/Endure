Q. 단편화에 대해 설명하시오 

Q. Paging 과 Segmentation의 차이점에대해 설명해주세요.

Q. 왜 둘중 하나를 골라야 하는가?

Q. 현대의 운영체제에서는 어떤방식이 쓰이는가?

-------------------------------------------------

Q.	단편화에 대해 설명하시오 
A.	단편화는, 메모리 공간이 효율적으로 사용되지 못하고, 작은 빈 공간이 낭비되는것을 말합니다. 
	내부단편화와 외부단편화로 나뉠 수 있습니다. 

	2. 단편화의 유형
		a. 내부 단편화(Internal Fragmentation)
		원인: 고정 크기의 할당 단위로 인해, 할당된 블록 내에 사용되지 않는 부분이 생김.
		예시: 페이징 시스템
		영향:
			메모리 낭비: 사용되지 않는 메모리 공간이 증가하여 전체 시스템의 메모리 효율성이 떨어집니다.
			성능 저하: 메모리 부족 상태를 빠르게 초래할 수 있어, 프로그램 실행에 영향을 미칠 수 있습니다.
		해결방법 : 
			고정 크기 대신 가변 크기의 파티션을 사용하여 내부 단편화를 줄입니다.
			메모리를 더 세밀하게 관리하여 필요한 만큼만 할당받도록 합니다.
			메모리 풀(Memory Pool) 기법 → 동일한 크기의 객체를 미리 할당하여 관리.

	b. 외부 단편화(External Fragmentation)
		원인: 가변 크기의 메모리 할당 방식에서, 시스템 전체에 사용 가능한 메모리 총량은 충분함에도 불구하고, 
			연속된 큰 공간이 부족하여 대규모 할당 요청을 처리하지 못하는 상황을 말합니다.
		예시: 세그멘테이션 시스템
		영향:
			메모리 낭비: 충분한 총 메모리 용량이 있음에도 불구하고, 연속된 큰 메모리 블록을 할당받지 못해 메모리 사용 효율성이 떨어집니다.
			프로그램 실행 제한: 큰 메모리 블록이 필요한 프로그램이나 작업을 실행할 수 없게 될 수 있습니다.
		해결방법 : 
			메모리 압축(Memory Compaction): 메모리 내의 데이터를 재배치하여 연속된 큰 메모리 블록을 확보합니다.
			페이징 기법(Paging) : 연속된 메모리 할당이 필요하지 않도록 메모리를 작은 페이지 단위로 관리.

-------------------------------------------------

Q. Paging 과 Segmentation의 차이점에대해 설명해주세요.
A.	
	1. 정의
		Paging(페이징): 고정 크기의 페이지로 메모리를 나누어, 논리 주소를 물리 주소로 매핑하는 방식입니다.
		Segmentation(세그멘테이션): 가변 크기의 논리적 단위(함수, 데이터 등)로 메모리를 나누는 방식입니다.

	2. 목적 및 특징
		Paging은 외부 단편화를 방지하고, 메모리를 균등하게 관리하는 데 목적이 있습니다. 각 페이지는 크기가 같아 연속성이 없는 공간에도 배치할 수 있습니다.
		Segmentation은 프로그램 구조(코드, 데이터, 스택 등)에 따라 메모리를 관리하여 논리적 구분과 보호가 용이합니다.

	3. 차이점 요약
					 Paging				Segmentation
		단위 크기 : 고정 크기 (page)  |	 가변 크기 (segment)
		목적	메모리 : 단편화 방지		 |	 논리적 구조 표현
		주소 변환 방식 : 페이지 번호 + 오프셋 | 세그먼트 번호 + 오프셋
		단편화 : 내부 단편화 발생 가능	 | 외부 단편화 발생 가능
		보호 및 공유 용이성 : 낮음	 |	 높음
		
-------------------------------------------------
		
Q. 왜 둘중 하나를 골라야 하는가?
A.
	운영체제는 성능, 효율, 구현 난이도를 고려하여 Paging이나 Segmentation 중 하나 또는 둘을 조합해서 선택합니다.
	Paging은 메모리를 균등하게 분할해 관리하므로 외부 단편화가 없고 구현이 단순합니다. 메모리 보호나 교체 정책도 효과적으로 적용 가능합니다.
	반면, Segmentation은 프로그램 구조에 맞춰 메모리를 나누기 때문에 논리적 구분, 보안, 공유 등에서 유리하지만, 외부 단편화가 발생하고, 메모리 할당이 복잡해질 수 있습니다.
	= 따라서, 운영체제는 요구 사항에 따라 선택하거나, 두 방식을 결합해서 사용하는 경우가 많습니다.



-------------------------------------------------

Q. 현대의 운영체제에서는 어떤방식이 쓰이는가?
A.
	- 현대 운영체제는 Paging을 중심으로, 필요 시 Segmentation을 보조적으로 사용합니다. 이는 단편화를 줄이면서도 구조적 표현이 필요한 경우를 고려한 설계입니다

	- 현대 운영체제(예: Linux, Windows)는 대부분 Segmentation + Paging의 조합 또는 Paging 중심 구조를 사용합니다.
	x86 아키텍처는 세그먼트를 사용해 논리 주소를 선처리하고, 그 결과를 페이징 기법으로 물리 주소에 매핑합니다.
	Linux와 Windows는 세그먼트를 거의 1개(전체 영역)로 통합해 사용하고, 페이징 중심으로 메모리 관리를 수행합니다.
	즉, 실제 메모리 관리에서 Segmentation은 논리 구조 표현용으로 최소 사용, 실질적인 메모리 할당/보호/교체는 페이징 기반입니다.