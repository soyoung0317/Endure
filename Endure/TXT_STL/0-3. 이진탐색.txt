Q. 이진탐색(이분탐색) 에 대해 설명하시오.

-------------------------------------------------


Q. 이진탐색(이분탐색) 에 대해 설명하시오.
A. 이진탐색이란 정렬된 리스트(배열) 에서 원하는값(target)의 존재여부를 찾는 알고리즘
	반드시 리스트(배열)을 정렬해서 사용해야한다. 
	탐색할때마다 검사 범위가 절반으로 줄어든다. 
	-> 재귀적인 방법, 반복문, stl을 이용하여 

[단점]	트리모양이 한쪽으로 치우쳐지면 트리 탐색의 장점인 O(logN)의 시간복잡도가 순차탐색하듯이 수행하여 O(n)에 가까워진다는 단점이 있다. 
		따라서, 데이터를 추가/삭제 할 때 "트리모양이 한쪽으로 치우쳐지지않고 균형있는 모양을 유지시키야 한다. "
		-> 이렇게 균형잡힌 이진탐색 트리가 되도록 보장되는 트리가 바로 "레드 블랙 트리" 이다 .

[탐색]  루트노드부터 시작해여 찾을값과 비교하여 내려오면서 찾는다. 
        찾는값 < 현재 트리의 루트노드 값 : 왼쪽 서브트리로 내려간다. / 반대면 오른쪽 서브트리로 내려간다. 
        이 과정을 일치하는 값을 찾을 때 까지 재귀적으로 반복한다. 

[삽입]  이진탐색 규칙을 만족해야하므로 새 노드가 삽입될 적절한 위치를 이진탐색으로 찾아야 한다. 
    
-------------------------------------------------
[참고] 노드 
class Node
{
public:
    int data;
    Node* leftChild = NULL;
    Node* rightChild = NULL;

    Node(int _data, Node* _leftChild, Node* _rightChild)
        :data(_data), leftChild(_leftChild), rightChild(_rightChild)
    { }
};