Q. list에 대해 설명해주세요 

Q. list에서 메모리를 재할당하지 않고 동적으로 크기를 조정하는 방식은 어떻게 이루어지는가요?

-------------------------------------------------------
Q.	list에 대해 설명해주세요 
A. 	
	1. 정의
		std::list는 양방향 연결 리스트를 구현한 컨테이너입니다. 
		각각의 요소가 이전요소와 다음요소를 가리키는 포인터를 가지고 있어 리스트의 어느 위치든 삽입과 삭제가 빠릅니다. 
		메모리 상에 연속적으로 배치되지 않으며 각 요소가 서로 독립적으로 연결되어 있다.

	2. 주요 특징
		1) 메모리 배치
			연속된 메모리 공간이 아니라 각각의 노드가 독립적으로 할당되며, 각 노드는 다음/이전 노드의 포인터를 가집니다.
			그래서 배열처럼 연속된 메모리에 접근할 수 없습니다.

		2) 삽입 및 삭제
			중간 삽입/삭제가 빠릅니다: 요소를 삽입하거나 삭제할 때 연결만 변경하면 되기 때문에 std::vector보다 빠른 시간에 삽입/삭제가 가능합니다 (O(1)).
			단점: std::vector처럼 랜덤 액세스가 불가능하고, O(n)의 시간 복잡도를 가집니다.
			-> 반복자 (iteraotr)를 통한 접근을 해야한다. 

		3) 크기 변경
			std::vector처럼 크기를 동적으로 조정할 수 있습니다. 그러나 배열처럼 일관된 메모리 영역에 저장되지 않기 때문에 메모리 관리 방식이 다릅니다.
		
	3. 주요 멤버 함수
		1) 생성자
			std::list<int> l1;           // 빈 리스트
			std::list<int> l2(5, 10);    // 5개의 10으로 초기화
			std::list<int> l3 = {1, 2, 3}; // 초기화 리스트 사용

		2) 삽입 및 삭제
			push_back(value) : 끝에 추가
			push_front(value) : 앞에 추가
			pop_back() : 끝에서 제거
			pop_front() : 앞에서 제거
			insert(pos, value) : 특정 위치에 삽입
			erase(pos) : 특정 위치에서 제거
			clear() : 모든 요소 제거
		3) 접근
			front() : 첫 번째 요소 반환
			back() : 마지막 요소 반환
			begin() : 첫 번째 요소의 iterator 반환
			end() : 마지막 요소의 iterator 반환
			
		4) 기타
			size() : 리스트의 크기
			empty() : 리스트가 비었는지 확인
			splice(pos, list) : 다른 리스트의 요소를 합침

	4. 사용경험
		- 리스트의경우 프로젝트에서 렌더러에서 사용했었는데, 렌더될 대상이 매 업데이트 틱마다 리스트에 담기고, 
		해당 리스트에 담긴 오브젝트의 Render함수를 호출한뒤, 모든작업이 끝나면 리스트를 비우는 방식으로 삽입과 삭제가 빈번하게 발생하게되어 리스트를 사용하였습니다. 
	
-------------------------------------------------------

Q.	리스트에서 메모리를 재할당하지 않고 동적으로 크기를 조정하는 방식은 어떻게 이루어지는가요?
A. 	새로운 요소가 추가될경우 필요한만큼의 메모리를 할당하게됩니다. 
	예를들어, 새로운 값이 추가가 되면 기존 요소들을 재배치 하지 않고 새로운 노드를 할당하기때문에 다른 노드에 영향을 주지 않습니다. 
	따라서 메모리 재할당이 이루어지지 않습니다. 
	
-------------------------------------------------------
