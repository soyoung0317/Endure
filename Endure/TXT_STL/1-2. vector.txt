Q. vector에 대해 설명하시오

Q. vector의 재할당시 메모리 크기를 얼마로 할당하는가?

Q. vector의 resize, reserve, capacity에 대해 설명하시오

Q. 원소가 가득찬 벡터의 0번 인덱스로 새로운 값을 insert 할 때와 push_back으로 새로운 값을 추가할 때를 설명하시오.  

-------------------------------------------------
Q.	vector에 대해 설명하시오
A.	vector는 연속된 메모리공간을 사용하여 데이터를 저장합니다. 동적으로 크기가 조정할 수 있어 유연하게 사용할 수 있다는 장점이 있습니다.
	인덱스를 통한 접근이 가능하고( = 임의접근) 이경우 O(1)의 시간복잡도를 가집니다. 
	벡터에 마지막에 요소를 추가하는 push_back의 경우도 일반적으로 o(1)의 시간복잡도를 가집니다. 
	중간에 삽입이나 삭제가 일어날경우 모든 요소들이 이동해야하기때문에 최악의경우 O(n)의 시간복잡도를 갖기도 하고 끝에서 이루어질경우 O(1)의 시간복잡도를 갖습니다. 
	검색의경우 일반적으로 o(n)의 시간복잡도를 가집니다. 

	[사용예시]
	툴에서 파싱한 데이터를 읽어올 때 사용하였습니다. 
	데이터를 읽으면서 레이어 단위로 벡터에 넣고, 레이어 안에 있는 오브젝트를 순회하면서 클론을 통해 오브젝트를 생성하는 방식으로 구현하였습니다. 
	
-------------------------------------------------

Q.	vector의 재할당시 메모리 크기를 얼마로 할당하는가?
A.	기존용량의 두배로 증가시킵니다. 
	이경우 다중 재할당을 방지하기 위해서 입니다. 

-------------------------------------------------

Q.	vector의 resize, reserve, capacity에 대해 설명하시오
A.	capacity : 할당해놓은 배열의 크기 
	size : 배열에 저장된 원소의 개수 
	resize : 벡터의 size를 조정하는 함수로 메모리를 새롭게 할당 + 초기화 
	reserve : 벡터의 capacity를 조정하는 함수로 메모리를 새롭게 할당 / 현재 capa보다 커야지만 동작한다. / 어떤한 값으로 초기화 하지 않는다. 

	resize가 capa보다 큰경우 용량은 여전히 5일 수 있다. 
[예시]	vector<int> vec = {1, 2, 3};
		vec.resize(5); // {1, 2, 3, 0, 0}

-------------------------------------------------

Q.	원소가 가득찬 벡터의 0번 인덱스로 새로운 값을 insert 할 때와 push_back으로 새로운 값을 추가할 때를 설명하시오.  
A.	0번 인덱스에 새로운 값을 추가 할 때, 
	2배의 용량으로 벡터를 하나 만들고, 0번 인덱스에 새로운 값을 추가한뒤, 이후 기존의 값들을 이동시킨다. 
	기존 벡터역시 자동으로 메모리가 해제됩니다. 

-------------------------------------------------