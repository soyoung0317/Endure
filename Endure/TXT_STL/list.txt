Q.리스트에 대해 설명해주세요 

Q. 리스트에서 메모리를 재할당하지 않고 동적으로 크기를 조정하는 방식은 어떻게 이루어지는가요?

Q. vector와 list의 주요 차이점은 무엇이며, 각각 어떤 상황에서 사용하는 것이 적절한가?
---------------------------------

A. 
	리스트는 데이터를 저장할 때 하나의 데이터와 그 다음 데이터의 주소를 함께 저장하는 자료구조입니다. 
	크기가 동적으로 변할 수 있으며, 크기가 미리 결정되지 않으므로 요소를 추가하거나 삭제할 때 메모리 재할당이 필요하지 않습니다. 
	각 원소는 독립적으로 메모리에 할당됩니다. 
	임의접근의경우 노드를 순차적으로 탐색해야하므로 O(n)의 시간복잡도를 가지며, 
	삽입이나 삭제가 이루어질경우 포인터만 수정하면 되기때문에 O(1)의 시간복잡도를 갖습니다. 
	검색 역시 노드를 순차적으로 탐색해야하므로 O(n)의 시간복잡도를 갖습니다. 

	따라서, 삽입이나 삭제가 빈번하게 일어나는경우 사용하기 좋습니다. 


A. 
	새로운 요소가 추가될경우 필요한만큼의 메모리를 할당하게됩니다. 
	예를들어, 새로운 값이 추가가 되면 기존 요소들을 재배치 하지 않고 새로운 노드를 할당하기때문에 다른 노드에 영향을 주지 않습니다. 
	따라서 메모리 재할당이 이루어지지 않습니다. 

A. 
	벡터의경우 메모리에상에서 연속적인 공간을 사용하므로 임의접근이 가능하여 빠르게 검색이 가능합니다. 
	다만 크기가 커질경우 배열을 재할당하고 데이터를 복사해야하는 경우가 생기므로 성능의 저하가 이루어질 수 있습니다. 

	리스트의경우 불연속적인 메모리공간을 사용하여 임의접근이 불가능합니다.
	다만 메모리 재할당이 필요하지 않아 성능저하가 없습니다. 

	따라서, 데이터를 자주 조회하거나, 메모리의 연속성 즉 캐시효율이 중요한경우 벡터가 사용되고 
	중간 삽입삭제가 빈번하게 일어나고 임의접근이 불필요한경우 리스트를 사용하게됩니다. 

	예를들어, 벡터의경우 특정 클래스가 여러 개의 콜라이더를 가질 때 유용하게 사용되었습니다. 
	각 콜라이더를 빠르게 조회하여 충돌검사를 효율적으로 처리하기 위해 벡터를 사용했습니다. 
	리스트의경우 프로젝트에서 렌더러에서 사용했었는데, 렌더될 대상이 매 업데이트 틱마다 리스트에 담기고, 
	해당 리스트에 담긴 오브젝트의 Render함수를 호출한뒤, 모든작업이 끝나면 리스트를 비우는 방식으로 삽입과 삭제가 빈번하게 발생하게되어 리스트를 사용하였습니다. 
	