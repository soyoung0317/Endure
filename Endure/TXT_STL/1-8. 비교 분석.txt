Q. vector vs array 비교 

Q. vector vs list 비교

Q. vector와 list 모두 검색에서 O(n)의 시간복잡도를 갖는다. 그렇다면 걸린 시간이 똑같이 측정되는가 ?

-------------------------------------------------

Q.	array와 vector의 차이
A.	
	1. 항목 
		array : std::array<T, N> 
		vector : std::vector<T>
	2. 크기 
		array : 컴파일 타임 고정 크기 (N은 상수) 
		vector : 런타임에 크기 동적으로 변경 가능
	3. 메모리 위치 
		array: stack에 직접 배치되어 속도가 빠르고 캐시 친화적
		vector: heap에 동적 할당되어 약간 느릴 수 있으나, 유연함
	4. 캐시 친화성 
		array : 매우 좋음 (연속된 메모리 + 스택) 
		vector : 좋음 (연속된 힙 메모리)
	5. 복사/이동 
		array: 멤버 배열 전체가 복사되어 약간 무거울 수 있음. 요소 단위 복사 / 이동 
		vector: 내부 포인터만 복사되므로, 얕은 이동이 빠름
	6. 초기화 
		array : 생성 시 {}로 초기화 필요 
		vector : .resize() 또는 push_back() 등으로 런타임 설정 가능
	7. 오버헤드 
		array : 거의 없음 (포인터 등 추가 없음) 
		vector : capacity 관리, 동적 할당 등으로 소량의 오버헤드 존재
	8. 유연성 
		array : 크기 변경 불가 
		vector : 요소 추가/삭제 가능 (push_back, resize, 등)
	9. 에러 처리 
		array : 크기 초과 접근 시 UB (operator[]) 
		vector : at(i) 사용 시 예외 발생 가능 (std::out_of_range)
	10. 사용 가능한 STL 함수 
		array : 반복자 기반 STL 알고리즘 모두 사용 가능 
		vector : 동일
	11. C 배열과 차이 
		array : C 배열보다 안전하고 STL 호환 가능 
		vector : C 배열보다 훨씬 유연하고 고기능
	12. 상황별 고려사항
		크기가 정해진 데이터, 고정 버퍼 - 	std::array : 오버헤드 없고 빠름
		입력 개수가 유동적일 때 - std::vector : 동적 크기 지원
		게임에서 프레임당 반복되는 루프 - std::array : 고정 크기 + 캐시 친화
		사용자 입력, 네트워크 패킷 모음 - std::vector : 메모리 확장 가능
		함수 간 배열을 값으로 전달 - std::array : 값 복사 가능
		매우 큰 배열을 써야 할 때 - std::vector : 스택 오버플로우 방지 (힙 사용)
-------------------------------------------------
Q. vector vs list 비교 
A. 
	1.삽입/삭제 속도
		연산					std::list	std::vector
		끝에	삽입				O(1)	O(1)
		중간 삽입/삭제		O(1)	O(n)
		앞에 삽입			O(1)	O(n) (배열 크기 변경 필요)
	
	2. 접근 속도
		연산			std::list	std::vector
		랜덤 액세스		O(n)	O(1)
		순차 접근		O(n)	O(n)
	
	3. 메모리 효율성
		std::list는 각각의 요소가 이전/다음 요소를 가리키는 포인터를 포함하므로 메모리 오버헤드가 큽니다.
		std::vector는 연속된 메모리 공간에 저장되기 때문에, 메모리 효율성이 더 좋습니다.
	
-------------------------------------------------

Q. 벡터와 리스트 모두 검색에서 O(n)의 시간복잡도를 갖는다. 그렇다면 걸린 시간이 똑같이 측정되는가 ?
A. 아니요 벡터(Vector)와 리스트(List)는 모두 검색에서 O(n)의 시간 복잡도를 가지지만, 걸린 시간이 똑같이 측정되지 않습니다.

	벡터(Vector): 메모리 상에서 연속된 공간에 데이터를 저장합니다.
		따라서 CPU 캐시 효율이 높아, 데이터 접근 속도가 빠릅니다.
		-> 캐시메모리의 공간지역성 
	
	리스트(List): 각 노드가 분산된 메모리에 저장되며, 각 노드는 다음 노드의 주소를 포함합니다.
		따라서 포인터를 따라가야 하므로 캐시 적중률이 낮아 검색 속도가 느려질 수 있습니다.
