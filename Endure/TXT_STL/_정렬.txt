Q. vector와 list의 정렬에 대해 설명하시오 

Q. vector와 list의 정렬이 nlogn으로 동일한데, 그럼 둘이 같은 성능을 내는것인가? 

-------------------------------------------------

Q. vector와 list의 정렬에 대해 설명하시오 
A.	list
		정렬 지원: 내부 멤버 함수 list::sort로만 정렬 가능 (std::sort 지원하지 않음).
		= 병합 정렬 (Merge Sort)
		메모리 재할당 없이 연결 리스트의 포인터를 재조정.
		비교 연산자를 지정할 수 있음.
		O(n log n) 시간 복잡도.
	[사용법]
		myList.sort();
		
		myList.sort([](int a, int b) {
		    return a > b; // 내림차순
		});


	vector
		정렬 지원: std::sort(algorithm 헤더)를 사용하여 정렬.
		= 퀵 정렬(QuickSort), 힙 정렬(HeapSort), 삽입 정렬(InsertionSort)을 조합.
		O(n log n) 시간 복잡도.

	[사용법]
		sort(myVector.begin(), myVector.end()); // std::sort로 정렬

		sort(myVector.begin(), myVector.end(), [](int a, int b) {
		    return a > b; // 내림차순
		});
-------------------------------------------------

Q.	vector와 list의 정렬이 nlogn으로 동일한데, 그럼 둘이 같은 성능을 내는것인가? 
A.	시간 복잡도는 둘 다 O(nlogn)으로 동일하지만, 실제 성능에는 큰 차이가 있습니다. 벡터가 훨씬 빠릅니다. 
	vector의 경우, 연속적 메모리에 있기때문에 CPU 캐시 친화적이고
	list의경우, 노드가 메모리에 분산되어 있어 CPU 캐시 효율이 낮고 포인터 조작 비용이 추가로 발생하기때문에 
	실제 성능은 vector가 list보다 훨씬 빠릅니다.