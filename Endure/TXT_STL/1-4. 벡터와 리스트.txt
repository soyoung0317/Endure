Q. vector와 list의 주요 차이점은 무엇이며, 각각 어떤 상황에서 사용하는 것이 적절한가?

Q. 벡터와 리스트 모두 검색에서 O(n)의 시간복잡도를 갖는다. 그렇다면 걸린 시간이 똑같이 측정되는가 ?

-------------------------------------------------

Q.	vector와 list의 주요 차이점은 무엇이며, 각각 어떤 상황에서 사용하는 것이 적절한가?
A. 	벡터의경우 메모리에상에서 연속적인 공간을 사용하므로 임의접근이 가능하여 빠르게 검색이 가능합니다. 
	다만 크기가 커질경우 배열을 재할당하고 데이터를 복사해야하는 경우가 생기므로 성능의 저하가 이루어질 수 있습니다. 

	리스트의경우 불연속적인 메모리공간을 사용하여 임의접근이 불가능합니다.
	다만 메모리 재할당이 필요하지 않아 성능저하가 없습니다. 

	따라서, 데이터를 자주 조회하거나, 메모리의 연속성 즉 캐시효율이 중요한경우 벡터가 사용되고 
	중간 삽입삭제가 빈번하게 일어나고 임의접근이 불필요한경우 리스트를 사용하게됩니다. 

	예를들어, 벡터의경우 특정 클래스가 여러 개의 콜라이더를 가질 때 유용하게 사용되었습니다. 
	각 콜라이더를 빠르게 조회하여 충돌검사를 효율적으로 처리하기 위해 벡터를 사용했습니다. 
	리스트의경우 프로젝트에서 렌더러에서 사용했었는데, 렌더될 대상이 매 업데이트 틱마다 리스트에 담기고, 
	해당 리스트에 담긴 오브젝트의 Render함수를 호출한뒤, 모든작업이 끝나면 리스트를 비우는 방식으로 삽입과 삭제가 빈번하게 발생하게되어 리스트를 사용하였습니다. 

	
-------------------------------------------------

Q. 벡터와 리스트 모두 검색에서 O(n)의 시간복잡도를 갖는다. 그렇다면 걸린 시간이 똑같이 측정되는가 ?
A. 아니요 벡터(Vector)와 리스트(List)는 모두 검색에서 O(n)의 시간 복잡도를 가지지만, 걸린 시간이 똑같이 측정되지 않습니다.

	벡터(Vector): 메모리 상에서 연속된 공간에 데이터를 저장합니다.
		따라서 CPU 캐시 효율이 높아, 데이터 접근 속도가 빠릅니다.
		-> 캐시메모리의 공간지역성 
	
	리스트(List): 각 노드가 분산된 메모리에 저장되며, 각 노드는 다음 노드의 주소를 포함합니다.
		따라서 포인터를 따라가야 하므로 캐시 적중률이 낮아 검색 속도가 느려질 수 있습니다.