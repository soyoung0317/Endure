Q. vector에 대해 설명하시오

Q. vector의 재할당시 메모리 크기를 얼마로 할당하는가?

Q. vector의 resize, reserve, capacity에 대해 설명하시오

Q. c++ 11에서 도입된 emplace 계열 ( emplace_back, emplace_front 등의 장점은 무엇인가?

Q. array와 vector의 차이
----------------------- 

A. (24.11.19)
	vector는 연속된 메모리공간을 사용하여 데이터를 저장합니다. 동적으로 크기가 조정할 수 있어 유연하게 사용할 수 있다는 장점이 있습니다.
	인덱스를 통한 접근이 가능하고( = 임의접근) 이경우 O(1)의 시간복잡도를 가집니다. 
	벡터에 마지막에 요소를 추가하는 push_back의 경우도 일반적으로 o(1)의 시간복잡도를 가집니다. 
	중간에 삽입이나 삭제가 일어날경우 모든 요소들이 이동해야하기때문에 최악의경우 O(n)의 시간복잡도를 갖기도 하고 끝에서 이루어질경우 O(1)의 시간복잡도를 갖습니다. 
	검색의경우 일반적으로 o(n)의 시간복잡도를 가집니다. 

	[사용예시]
	툴에서 파싱한 데이터를 읽어올 때 사용하였습니다. 
	데이터를 읽으면서 레이어 단위로 벡터에 넣고, 레이어 안에 있는 오브젝트를 순회하면서 클론을 통해 오브젝트를 생성하는 방식으로 구현하였습니다. 

A. (24.11.20)
	기존용량의 두배로 증가시킵니다. 
	이경우 다중 재할당을 방지하기 위해서 입니다. 


A. (24.11.20)
	capacity : 할당해놓은 배열의 크기 
	size : 배열에 저장된 원소의 개수 
	resize : 벡터의 size를 조정하는 함수로 메모리를 새롭게 할당 + 초기화 
	reserve : 벡터의 capacity를 조정하는 함수로 메모리를 새롭게 할당 / 현재 capa보다 커야지만 동작한다. / 어떤한 값으로 초기화 하지 않는다. 

	resize가 capa보다 큰경우 용량은 여전히 5일 수 있다. 
[예시]	vector<int> vec = {1, 2, 3};
		vec.resize(5); // {1, 2, 3, 0, 0}
			

A. (24.11.21)
	불필요한 복사나 이동을 피할수 있다는 장점이 있습니다. 
	push_back의 경우 객체를 먼저 생성하고 컨테이너에 삽입하는데 
	emplace의 경우 객체를 컨테이너에 삽입하는 순간에 직접 생성합니다. 

	예를들어, vector<pair<int, int>>가 있다고 했을때, 
	push_back의경우 pair<int, int> a(1,2) 로 객체를 먼저 만들고 push_back(a)를 통해 삽입하거나, 
	push_back(make_pair(1, 2))를 통해 삽입해야합니다. 
	그러나 emplace의경우 emplace(1, 2)로 바로 삽입이 가능합니다. 

	이렇게 객체의 생성과 삽입을 하나의 호출로 처리하므로 코드가 더 간결해지고 객체의 삽입과정에서 불필요한 복사나 이동이 일어나지 않도록 피할 수 있습니다. 


A. (24.11.21)
	array는 컴파일타임에 배열의 크기가 결정되기 때문에 만약 변경한다고 하면 다시 배열을 선언하고 새로 할당받아야하는데, 
	vector의 경우 런타임에 동적으로 할당되어 필요에 따라 크기를 늘리거나 줄일 수 있습니다. 

	array는 정적 메모리이기때문에 스택에 할당되지만
	vector의경우 일반적으로 heap에 할당되며 재할당과 복사가 발생할 수 있습니다. 

	array는 메모리 재할당이 없기땜누에 오버헤드가 없어서 효율적입니다. 
	vector의 경우 동적 크기 조정으로 인해 메모리 재할당이 일어날 경우 약간의 오버헤드가 발생할 수 있습니다. 

	따라서 크기가 고정된 데이터를 처리할 경우 array, 동적으로 크기를 조정해야한다면 vector를 사용하는것이 적합합니다. 
