Q. deque에 대해 설명하시오 

-------------------------------------------------------

Q. deque에 대해 설명하시오 
A. 
	1. 정의
		양쪽 끝에서 삽입과 삭제가 모두 가능한 시퀀스 컨테이너입니다.
		vector와 유사하게 임의 접근이 가능하지만, push_front() 및 pop_front() 같은 앞쪽 조작도 상수 시간에 수행할 수 있습니다.
		
		deque는 여러 개의 벡터 조각들을 연결한 포인터 테이블을 가진 컨테이너같은것.
		전체적으로는 포인터 테이블을 통해 비연속적인 블록들을 가상으로 연결한 형태. = 비연속적 메모리구조. 

	2. 주요 특징
		- 양방향 삽입/삭제 가능: push_front, push_back, pop_front, pop_back 모두 지원
		- 임의 접근(Random Access) 가능: operator[], at() 사용 가능
		- 자동 크기 조정: 필요 시 내부적으로 자동으로 메모리 블록 확장
		- 비연속적 메모리 구조: 내부는 여러 블록으로 구성되어 있음 → 캐시 친화도는 떨어질 수 있음
		- STL 시퀀스 컨테이너 중 가장 범용적 (앞뒤 삽입이 모두 빠르면서도 임의 접근 가능)

	3. 주요 멤버 함수
		push_back(val)	뒤에 요소 삽입
		push_front(val)	앞에 요소 삽입
		pop_back()	뒤 요소 삭제
		pop_front()	앞 요소 삭제
		size()	현재 요소 수 반환
		empty()	비어있는지 여부 확인
		clear()	모든 요소 제거
		operator[]	인덱스를 통한 접근 (예: dq[2])
		at(index)	범위 검사 포함한 인덱스 접근
		front() / back()	맨 앞 / 맨 뒤 요소 접근
		insert(pos, val)	특정 위치에 삽입
		erase(pos)	특정 위치 요소 삭제

	4. 내부 동작 방식
		deque는 여러 개의 고정 크기 메모리 블록(chunk)을 포인터 배열(map)로 관리하는 방식입니다.
		앞/뒤에 공간이 부족해지면 블록을 하나 더 추가함으로써 push_front/push_back을 상수 시간에 처리할 수 있음.
		vector처럼 메모리 재할당(reallocation)이 없기 때문에 큰 데이터가 있는 경우 유리함.

	5. 복사 / 이동
		1) 복사 (copy)
			std::deque는 깊은 복사를 지원
			원소 하나하나를 복사하여 새 컨테이너에 저장
			deque<T> d2 = d1; 은 원소를 모두 복사함

		2) 이동 (move)
			std::deque는 얕은 이동도 가능
			내부 포인터(map과 블록들)를 새로운 객체로 빠르게 이전
			원소는 move 생성자로 처리되어 소유권 이전이 가능
			deque<T> d2 = std::move(d1); 후 d1은 비어있거나 무효 상태가 됨

	6. 주의사항
		- 중간 삽입/삭제가 비효율적입니다. → 중간 위치에서 자주 조작하는 경우에는 list나 다른 자료구조 고려.
		- 내부 블록 관리로 인해 벡터보다 약간의 오버헤드가 존재합니다.
		- 연속적인 메모리 보장이 없으므로 C API와의 연동에는 부적절할 수 있습니다.

	7. 왜 deque를 쓰나?
		- 벡터로는 앞에서 삽입/삭제가 느림 → deque이 유리.
		- 큐나 스택을 구현할 때 덱이 좋음. (STL의 queue, stack도 기본 컨테이너로 deque 사용)
		- 다양한 위치에서의 삽입/삭제를 균형 있게 고려할 경우 적합.