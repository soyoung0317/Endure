Q. SOLID원칙에 대해 설명하시오. 

A. 
(24.11.19) SOLID원칙은 객체지향 프로그래밍에서 프로그램을 만들기위한 일종의 지침으로 다섯가지 원칙을 이루는 말이다. 

첫번째로, SRP즉 단일책임원칙은 하나의 클래스는 하나의 책임을 가져야한다는 말이다. 
만약 게임 시작시 사용자 등록과 이메일 발송, 본인확인 등의 여러 책임이 하나의 Register클래스에 있다면 
이 클래스는 여러 책임이 있어 복잡하게 얽혀 코드의 가시성이 떨어진다. 
따라서, 각각의 사용자 등록과 이메일발송, 본인확인을 하나씩 하나씩의 클래스로 나누어 책임을 나누게 되면 
코드의 수정과 확장에 용이해진다. 

두번째로, OCP 즉 개방폐쇠원칙은 확장에는 열려있고 수정에는 닫혀있다는 말로 상속과 같은 확장에는 열려 있고 기존 코드 수정에는 닫혀있다는 말인데, 
예를들어, 플레이어의 무기에 따라 공격하는 방식이 다르다고 했을때, 
플레이어가 현재 사용중인 무기를 if문으로 분기하여 a일떄, b일때, ... 이렇게 나누게 되면 내부적으로 매우 복잡한 과정을 거치게된다. 
따라서, 이경우 여러 무기를 Weapon이라는 클래스를 통해 상속을 받고, 메서드 오버라이딩을 통해 공격을 구현한다면 무기가 추가되더라도 여러 문제에서 자유로워질 수 있습니다. 

세번째로, LSP 즉 리스코프 치환법칙의경우, 자식클래스는 부모클래스를 대체할 수 있어야한다는것입니다. 
만약 Bird라는 새 클래스에 fly라는 함수를 통해 날 수 있다고가정했을때, bird의 상속을 받는 펭귄클래스의 경우 날수없는 경우가 생깁니다. 
이경우 fly라는 함수를 flyable이라는 인터페이스를 통해 구현하여 bird중에 날수있는 자식들만 인터페이스를 상속받도록 합니다. 

네번째로 ISP 즉 인터페이스 분리법칙의경우, 클래스는 자신이 사용하지 않을 메서드를 사용하도록 강요받지 않아야 한다는 의미로 , 이경우 큰 덩어리의 인터페이스를 작은 단위로 분리하게합니다. 
예를들어, WORKER라는 클래스에 노동과 밥먹는 함수가 있다고 합시다. 여기서 사람인 노동자는 둘다 사용하지만 기계의 경우 밥을 먹지않기때문에 Eat이라는 함수가 잉여메서드가 되게 됩니다. 
따라서, work와 eat모두 인터페이스화 하여 worker중에 사람은 노동과 eat 인터페이스를 상속받고, 기계의 경우 work 인터페이스만 사용하도록 합니다. 

다섯번째로 d 즉 의 경우, 고수준 모듈은 .. 
[피드백] 다섯번째 외우기 