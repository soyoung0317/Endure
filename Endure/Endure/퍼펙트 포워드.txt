Q. 퍼펙트 포워드에 대해 설명하시오 

-------------------------------------------------

Q. 퍼펙트 포워드에 대해 설명하시오 
A. 

	1. 정의
		C++ 템플릿에서 인자의 타입과 특성을 그대로 유지하여 다른 함수로 전달하는 기법이다.
		Perfect Forwarding 을 통해 lvalue, rvalue, const, & 등의 속성을 보존할 수 있다.
		즉, 함수의 인자가 원래 가지고 있던 속성을 변경하지 않고 그대로 전달하는 것이 목표!

	2. 퍼펙트 포워드가 필요한 이유
		C++에서 일반적인 함수 호출 시, lvalue와 rvalue가 다르게 처리됨
		템플릿을 사용할 때, 인자의 특성이 유지되지 않는 경우가 발생할 수 있음
			template <typename T>
			void wrapper(T arg) {
			    foo(arg); // 여기서 lvalue, rvalue 구분이 사라짐!
			}
			
			int main() {
			    int a = 10;
			    wrapper(a);  // "lvalue reference int& a" 가 나와야 하는데...
			    wrapper(10); // "rvalue reference int&& a" 가 나와야 하는데...
			}

		2-1. 템플릿에서 왜 lvalue, rvalue의 구분이 사라지는가 ?
			템플릿에서 T arg는 "값 전달(Call by Value)" 방식이다.
			값 전달이 되면 원래 값(rvalue, lvalue 여부와 상관없이) "복사"되어 새로운 지역 변수(arg)가 생성된다.
			새로운 지역 변수는 "항상 lvalue"로 간주된다!

	3. 퍼펙트 포워딩(Perfect Forwarding)으로 해결
		템플릿 인자가 T&&일 때, std::forward<T>(arg)를 사용하면 원래 타입(lvalue or rvalue)이 유지됨!
			
			template <typename T>
			void wrapper(T&& arg) {
			    foo(std::forward<T>(arg)); // 원래 타입(lvalue or rvalue) 유지
			}
			
-------------------------------------------------