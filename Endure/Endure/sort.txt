Q. sort와 stable_sort의 차이점에 대해 설명하시오 

-------------------------------------------------

Q. sort와 stable_sort의 차이점에 대해 설명하시오 
A.
	데이터를 정렬할 때 동일한 값들이 존재하는 경우가 발생할 수 있다. 
	이때, 우리가 사용하는 일반적인 정렬 알고리즘은 동일한 값들의 순서를 보장하지 않아서, 정렬 후의 순서가 원래의 순서와 다를 수 있다. 
	
	예를 들어, 이름으로 사람들을 정렬한 후, 나이로 다시 정렬하면 나이가 같은 사람들의 상대적인 순서가 정렬된 후에 변경될 수 있다.

	C++ 표준 라이브러리에는 정렬 함수로서 std::sort()와 std::stable_sort()가 존재한다. 
	이 두 함수는 기본적으로 배열 또는 벡터의 시작과 끝 위치를 인자로 받으며, 선택적으로 비교 함수를 추가하여 사용할 수 있다. 
	둘 모두 시간 복잡도는 평균적으로 O(n log n)으로, 대략적으로 n (log n) 번의 비교를 수행한다. 
	
	▶하지만 std::stable_sort()는 동일한 값들 사이의 상대적인 순서를 유지하는 추가적인 작업이 필요하므로, 
	실제 실행 시간은 std::sort()보다 약간 더 길게 나올 수 있다.

	여기서 중요한점은, std::sort가 불안정한 정렬이라고 해서 항상 동일한 값들 사이의 순서가 변경된다는 게 아니라는 것이다. 
	이는 C++ 표준에서 명시되어 있지 않으며, 실제 동작은 구현에 따라 달라질 수 있다. 
	즉, std::sort에 의한 원소의 상대적인 순서 변경은 가능성에 불과하다는 것이다. 

	[정리] 원소 간 순서가 유지되어야 한다면 stable_sort, 그렇지 않다면 sort를 사용

