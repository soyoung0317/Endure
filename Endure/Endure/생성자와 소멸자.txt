Q. 생성자와 소멸자란 무엇인가 ?

Q. 상속관계에서 생성자와 소멸자의 호출순서를 말하시오 

Q. 소멸자에 virtual 키워드를 사용하는 이유가 무엇인가?

Q. 클래스 내부에 객체변수와 포인터 변수를 갖고있을때, 생성시점은 어떻게 다른가 ?
	(ex. 
	class Friend{
	private:				||	private: 
		Young m_cYoung      ||		Young* m_cYoung (포인터 변수)

Q. 복사생성자에 대해 설명하세요.

----------------------- 가림막 

A. (24.11.21)
	생성자는 객체를 생성할때 자동으로 호출되는 함수로 초기값을 설정하는 등의 작업을 수행합니다. 
	보통 클래스 이름과 동일한 이름의 함수르 리턴타입을 명시하지 않습니다. 
	디폴트 생성자, 매개변수 생성자 등이 있으며 
	디폴트 생성자의 경우 매개변수가 없는 생성자로, 클래스 내에 정의하지 않아도 컴파일러가 제공하는 함수이기도 합니다. 
	생성자 역시 함수이기때문에 오버로딩이 가능한데, 오버로딩을 한것이 바로 매개변수 생성자입니다. 
	매개변수 생성자의 경우 객체 생성시 매개변수로 초기값을 전달하는데 사용하기도 합니다. 

A. (24.11.21)
	기본적인 상속관계를 형성하고 있는 클래스라면, 
	부모클래스의 생성자 - 자식클래스의 생성자 - 자식클래스의 소멸자 - 부모클래스의 소멸자 순서로 호출되게 됩니다. 

A. (24.11.21)
	virtual키워드가 없다는 가정하에, 부모* A = new 자식 ; 으로 객체를 할당했다고 했을때, 
	delete A 를 하게될경우, 컴파일러는 정적바인딩이 일어나 부모*타입이므로 부모클래스의 소멸자를 호출하게됩니다. 
	이경우 자식객체는 생성자는 호출되었는데, 소멸자가 호출이 되지 않아 메모리 누수가 발생하게됩니다. 
	따라서, virtual 키워드를 부모클래스의 소멸자에 붙여서 컴파일러가 해당 delete코드를 읽을때 동적바인딩이 일어나 런타임에 처리를 하게되고, 
	이경우 자식의 소멸자를 먼저 호출한뒤 부모의 소멸자를 호출하게됩니다. 

A. (24.11.21)
	객체변수를 갖고있을경우, 객체이기때문에 생성자보다 먼저 객체화가 됩니다. 
	따라서, 해당 Young클래스의 생성자가 먼저 호출되고 이후에 Friend클래스가 호출되게됩니다. 
	포인터변수의경우, 객체가 아니라 포인터 이므로 객체화 되기 전에는 Young 클래스의 생성자가 호출되지 않습니다. 

	