Q. BFS와 DFS에 대해 설명하시오 

-----------------------------

A. 
	BFS(너비우선탐색) : 루트노드에서 시작해서 인접한 노드를 먼저 탐색하는방식
	- 더이상 방문하지 않은 노드가 없을 떄 까지 
	- 큐를 이용하여 구현 
	사용예시 : 최단경로 / 가장 가까운 플레이어 추적하는 몬스터 
	시간복잡도 : O(N+E) = 노드갯수 + 간선의 갯수 

	DFS(깊이우선탐색) : 루트노드에서 다음 분기(branch)로 넘어가기전에 해당 분기를 완벽하게 탐색하는 방식
	- 모든 노드를 방문하고자 하는 경우에 선택
	- 검색 속도 자체는 너비우선 탐색에 비해 느림
	- 스택 또는 재귀함수로 구현 
	사용예시 : 
	시간복잡도 : O(N+E) = 노드갯수 + 간선의 갯수 
	예를들어, 미로찾기에서 최대한 한 방향으로 갈 수 있을때까지 쭉 가다가 더이상 갈 수 없게되면 다시 가장 가까운 갈림길로 돌아와서 그 갈림길부터 다시 다른방향으로 탐색을 진행하는것

[진행방식]
		1
	  / │ \
	3	8	2
   / \	 \ /
  4 - 5	  7
		  6
[1. DFS]
	1. 루트노드 1부터 시작 / [1] 방문처리 
	2. [1]과 인접한 노드 [2], [3], [8] - 작은수 부터 탐색 규칙에 따라 [2] 탐색 진행
	3. 스택에 1 삽입 / [2]방문처리 / [2]와 인접노드 [1], [7] 이지만 [1]은 이미 방문처리되어있으므로  [7]로 진행
	4. 스택 1 2 / [7] 방문처리 / [7]의 인접노드 [2], [6], [8] 에서 작은거 우선 2 - 방문처리 되어있으므로 6 진행
	5. 스택 1 2 7 / [6] 방문처리 / 인접노드 없음 
	▶6. 스택 1 2 7 6 / 스택의 최상단 6을 꺼냄
	7. 스택 1 2 7 / 7 노드에서 방문하지 않은[8]로 방문처리
	방문순서 : 1 2 7 6 8 3 4 5 

[2. BFS]
	1. 큐 1 / 시작노드를 방문처리
	2. 큐에서 노드 1을 꺼내 방문하지 않은 인접노드 [2] [3] [8]을 큐에 삽입후 방문처리
	3. 큐 2 3 8 / 큐에서 노드2를 꺼내 방문하지 않은 인접노드를 큐에 삽입하고 방문처리 : 7 방문처리 
	4. 큐 3 8 7 / 큐에서 3을 꺼내 방문하지 않은 인접노드 4 5 를 큐에삽입하고 방문처리 - 1은 이미 방문처리되어있음
	5. 큐 8 7 4 5 / 큐에서 8을 꺼내지만 방문하지않은 인접노드가 없어서 무시

	방문순서 : 1 2 3 8 7 4 5 6 
	