Q. 알파 테스트(Alpha Test)에 대해 설명하시오 

Q. 알파 블렌딩(Alpha Blending)에 대해 설명하시오 

Q. 알파 소팅(Alpha Sorting)에 대해 설명하시오. 

Q. 알파블렌딩에서, 그려지는 순서에 따라 클리핑이 일어나는 문제를 해결하는 방식은 ? 

-------------------------------------------------

Q. 알파 테스트(Alpha Test)에 대해 설명하시오 
A.
	1. 정의
		픽셀의 알파 값(투명도)을 기준으로 해당 픽셀이 렌더링될지 말지를 결정하는 기술입니다. 
		이 과정에서는 알파 값이 특정 임계값(threshold)보다 클 경우 픽셀이 그려지고, 작으면 그려지지 않게 됩니다. 
		알파 테스트는 투명 물체를 처리할 때, 불필요한 렌더링을 줄여 성능을 최적화하는 데 유용합니다.
	
	2. 장점
		- 렌더링 성능 최적화: 불필요한 픽셀을 그리지 않으므로 성능이 향상됩니다.
		- 간단한 구현: 구현이 비교적 간단하며, 픽셀 수준에서 빠르게 처리할 수 있습니다.
	3. 단점
		반투명 효과 구현에 한계: 알파 테스트는 픽셀을 전혀 그리거나 그리지 않기 때문에 반투명 효과를 정확하게 구현하기 어려움. 
		예를 들어, 완전히 반투명한 물체는 자연스럽게 렌더링되지 않습니다.

-------------------------------------------------

Q. 알파 블렌딩(Alpha Blending)에 대해 설명하시오 
A. 
	1. 정의
		알투명도(알파 값)를 기반으로 두 개의 색을 섞는 기술입니다. 
		이 기술은 두 개의 이미지나 텍스처를 투명도에 맞게 섞어서 최종적으로 자연스럽게 합성하는 데 사용됩니다. 

	2. 알파 블렌딩의 계산 공식
		Result = a * foreground + (1-a)background

	3. 장점
		- 반투명 효과 구현: 반투명 물체를 자연스럽게 합성할 수 있어, 다양한 시각적 효과를 구현할 수 있습니다.
		- 자연스러운 합성: 여러 개의 이미지를 합성할 때, 투명도에 맞게 부드럽게 결합됩니다.

	4. 단점
		- 성능 문제: 알파 블렌딩은 픽셀 단위로 계산이 이루어지기 때문에, 많은 픽셀에 대해 블렌딩을 적용해야 할 경우 성능이 저하될 수 있습니다.
		- 깊이 테스트 문제: 반투명 물체를 그릴 때, 깊이 테스트가 제대로 작동하지 않으면 물체가 올바르게 겹치지 않거나, Z-fighting 문제가 발생할 수 있습니다.
		
-------------------------------------------------

Q. 알파 소팅(Alpha Sorting)에 대해 설명하시오. 
A.
	1. 정의
		알파 블렌딩을 사용할 때, 투명한 객체들이 겹치는 순서를 정확하게 처리하기 위해 객체들을 깊이에 맞게 정렬하는 기법입니다

	2. 필요한 이유
		(1) 알파 블렌딩과 깊이 테스트 문제
			알파 블렌딩은 투명한 객체를 섞어 그리는 방식입니다. 하지만 깊이 테스트(Z-buffering)는 불투명 객체에 대해서만 정확하게 작동하며, 
			투명 객체에 대해서는 문제가 발생할 수 있습니다.
			투명 객체들이 겹칠 때 깊이 테스트가 제대로 적용되지 않기 때문에, 어떤 객체가 앞에 그려져야 할지를 결정하는 데 알파 소팅이 필요합니다.
			
		(2) 화면에 표시되는 순서
			알파 소팅은 각 객체의 깊이에 따른 순서를 정렬하여 먼 객체부터 그리기 또는 가까운 객체부터 그리기 방식으로 처리됩니다.
			예를 들어, 먼 나무가 가까운 나무보다 먼저 그려지면, 그 위에 그려지는 나무의 부분이 투명하게 보이지 않습니다.
			반대로 가까운 나무부터 먼 나무까지 그리게 되면, 반투명 부분이 올바르게 그려집니다.

-------------------------------------------------

Q. 알파블렌딩에서, 그려지는 순서에 따라 클리핑이 일어나는 문제를 해결하는 방식은 ? 
A. 
	(1) 알파 소팅
		-> 그러나 카메라와의 거리를 기준으로 판단하게될경우 대각선문제로 인해 미세하게 뒤에 있지만 먼저 그려지는 상황이 발생할 수 있다. 
			이 경우 깊이버퍼를 사용하지 않는 방법도 있다. 

		-> 깊이버퍼를 사용하지 않으면 깊이테스트를 하지않고 렌더링하기때문에 모든 오브젝트가 섞여서 반투명하게 렌더링된다. 

		-> 내부가 비치지않도록 2PASS 렌더링을 해야한다. 
			1차적으로 불투명상태로 렌더링하며 렌더타겟에 깊이를 기록하고 
			해당깊이값을 이용해 반투명으로 다시 렌더링한다. 
			= 2번의 DrawCall이 발생하므로 오버헤드가 발생한다. 



-------------------------------------------------