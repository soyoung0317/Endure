Q. 카메라 월드행렬을 어떻게 구하는가? 

Q. 카메라가 움직여서 오브젝트를 찍은것인가 아니면 카메라는 가만히 있는데 오브젝트가 움직인것인가 ?

Q. near를 왜 0보다 크게 하는가 ?

-------------------------------------------------

Q.	카메라 월드행렬을 어떻게 구하는가?
A.	처음 카메라를 만들때 카메라의 위치와 타겟포지션을 받게됩니다. 
	(타겟포지션 - 현재 카메라 위치)를 정규화하여 look 벡터를 만들고, 
	z값이 1인 가상의 up벡터를 만들어서 look벡터와 외적을 하여 right 벡터를 만들게됩니다. 
	look벡터와 Right벡터를 외적하여 카메라의 up벡터를 만들게 됩니다. 

	따라서 카메라의 월드변환 행렬의 경우

	R.x U.x -F.x P.x
	R.y U.y -F.y P.y
	R.z U.z -F.z P.z
	 0   0    0   1

	이제 카메라의 위치(Position)와 방향(Forward, Right, Up)을 반영한 월드 행렬이 완성됨!
	
	[정리]
	 Forward는 Target - Position,
	 Right는 Up × Forward, 
	 Up은 Forward × Right를 사용하여 구한다.

	 ★ 뷰 변환 행렬 = 카메라 월드 행렬의 역행렬(Inverse Matrix)

-------------------------------------------------

Q. 카메라가 움직여서 오브젝트를 찍은것인가 아니면 카메라는 가만히 있는데 오브젝트가 움직인것인가 ?
A. XMMatrixLookAtLH()가 업데이트되면서, 카메라가 움직이는 것처럼 보이지만 실제로는 "모든 오브젝트가 반대로 변환"된 것이다.

카메라가 이동한다고 생각하지만, 실제로는 카메라의 위치를 기반으로 모든 오브젝트가 반대로 이동된다.
 즉, 뷰 변환(View Transformation)은 "카메라를 움직이는 것처럼 보이게 하기 위해 모든 오브젝트를 반대로 변환하는 과정"이다.
 카메라의 위치가 변경되면 XMMatrixLookAtLH()를 통해 변환된 뷰 행렬(View Matrix)이 업데이트된다.
  이 뷰 행렬이 적용되면 모든 오브젝트가 반대 방향으로 변환되면서, 카메라가 움직인 것처럼 보이는 것이다.
  
-------------------------------------------------
  
Q. near를 왜 0보다 크게 하는가 ?
A.	
	1. 정의
		near는 투영 변환(Projection Transformation)에서 중요한 역할을 하는 근평면(near plane)의 거리를 정의하는 값입니다. 
		근평면은 카메라에서 가장 가까운 평면으로, 이 평면보다 더 가까운 물체는 렌더링되지 않으며, 깊이 버퍼(Depth Buffer)에서의 깊이 계산에 영향을 미칩니다.

	2. 왜 near 값을 0보다 크게 설정하는가?
		- 수학적 오류
			W-클립핑이나 원근 투영 과정에서 near 값이 0일 경우, 1/near의 값을 계산할 때 수학적으로 문제가 발생할 수 있습니다.
			
-------------------------------------------------